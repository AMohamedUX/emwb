{"ast":null,"code":"import React, { useState, useRef, useEffect, useCallback, Children, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useToggle } from '../../utilities/use-toggle.js';\nimport { Key } from '../../types.js';\nimport { scrollable } from '../shared.js';\nimport styles from './Listbox.scss.js';\nimport { useComboboxListbox } from '../../utilities/combobox/hooks.js';\nimport { scrollOptionIntoView } from '../../utilities/listbox/utilities.js';\nimport { ListboxContext, WithinListboxContext } from '../../utilities/listbox/context.js';\nimport { TextOption } from './components/TextOption/TextOption.js';\nimport { Loading } from './components/Loading/Loading.js';\nimport { Section } from './components/Section/Section.js';\nimport { Header } from './components/Header/Header.js';\nimport { Action } from './components/Action/Action.js';\nimport { useUniqueId } from '../../utilities/unique-id/hooks.js';\nimport { KeypressListener } from '../KeypressListener/KeypressListener.js';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.js';\nimport { Option } from './components/Option/Option.js';\nlet AutoSelection;\n\n(function (AutoSelection) {\n  AutoSelection[\"FirstSelected\"] = \"FIRST_SELECTED\";\n  AutoSelection[\"First\"] = \"FIRST\";\n})(AutoSelection || (AutoSelection = {}));\n\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\n\nfunction Listbox(_ref) {\n  let {\n    children,\n    autoSelection = AutoSelection.FirstSelected,\n    enableKeyboardControl,\n    accessibilityLabel,\n    onSelect,\n    onActiveOptionChange\n  } = _ref;\n  const [loading, setLoading] = useState();\n  const [activeOption, setActiveOption] = useState();\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const {\n    value: keyboardEventsEnabled,\n    setTrue: enableKeyboardEvents,\n    setFalse: disableKeyboardEvents\n  } = useToggle(Boolean(enableKeyboardControl));\n  const listId = useUniqueId('Listbox');\n  const scrollableRef = useRef(null);\n  const listboxRef = useRef(null);\n  const {\n    listboxId,\n    textFieldLabelId,\n    textFieldFocused,\n    willLoadMoreOptions,\n    setActiveOptionId,\n    setListboxId,\n    onOptionSelected,\n    onKeyToBottom\n  } = useComboboxListbox();\n  const inCombobox = Boolean(setActiveOptionId);\n  useEffect(() => {\n    if (setListboxId && !listboxId) {\n      setListboxId(listId);\n    }\n  }, [setListboxId, listboxId, listId]);\n  const getNavigableOptions = useCallback(() => {\n    if (!listboxRef.current) {\n      return [];\n    }\n\n    return [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))];\n  }, []);\n  const getFirstNavigableOption = useCallback(currentOptions => {\n    const hasSelectedOptions = currentOptions.some(option => option.getAttribute('aria-selected') === 'true');\n    let elementIndex = 0;\n    const element = currentOptions.find((option, index) => {\n      const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n      let isFirstNavigableOption;\n\n      if (hasSelectedOptions && autoSelection === AutoSelection.FirstSelected) {\n        const isSelected = option.getAttribute('aria-selected') === 'true';\n        isFirstNavigableOption = isSelected && isInteractable;\n      } else {\n        isFirstNavigableOption = isInteractable;\n      }\n\n      if (isFirstNavigableOption) elementIndex = index;\n      return isFirstNavigableOption;\n    });\n    if (!element) return;\n    return {\n      element,\n      index: elementIndex\n    };\n  }, [autoSelection]);\n  const handleScrollIntoView = useCallback(option => {\n    const {\n      current: scrollable\n    } = scrollableRef;\n\n    if (scrollable) {\n      scrollOptionIntoView(option.element, scrollable);\n    }\n  }, []);\n  const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n  const handleKeyToBottom = useCallback(() => {\n    if (onKeyToBottom) {\n      setLazyLoading(true);\n      return Promise.resolve(onKeyToBottom());\n    }\n  }, [onKeyToBottom]);\n  const handleChangeActiveOption = useCallback(nextOption => {\n    if (!nextOption) return setActiveOption(undefined);\n    activeOption === null || activeOption === void 0 ? void 0 : activeOption.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n    nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n    handleScrollIntoViewDebounced(nextOption);\n    setActiveOption(nextOption);\n    setActiveOptionId === null || setActiveOptionId === void 0 ? void 0 : setActiveOptionId(nextOption.domId);\n    onActiveOptionChange === null || onActiveOptionChange === void 0 ? void 0 : onActiveOptionChange(nextOption.value);\n  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]);\n  const getFormattedOption = useCallback((element, index) => {\n    return {\n      element,\n      index,\n      domId: element.id,\n      value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n      disabled: element.getAttribute('aria-disabled') === 'true',\n      isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true'\n    };\n  }, []);\n  const resetActiveOption = useCallback(() => {\n    var _nextOption, _nextOption2, _nextOption3;\n\n    let nextOption;\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n\n    if (nextOptions.length === 0 && currentOptions.length > 0) {\n      setCurrentOptions(nextOptions);\n      handleChangeActiveOption();\n      return;\n    }\n\n    if (nextActiveOption) {\n      const {\n        element,\n        index\n      } = nextActiveOption;\n      nextOption = getFormattedOption(element, index);\n    }\n\n    const optionIsAlreadyActive = activeOption !== undefined && ((_nextOption = nextOption) === null || _nextOption === void 0 ? void 0 : _nextOption.domId) === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.domId);\n    const actionContentHasUpdated = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.isAction) && ((_nextOption2 = nextOption) === null || _nextOption2 === void 0 ? void 0 : _nextOption2.isAction) && ((_nextOption3 = nextOption) === null || _nextOption3 === void 0 ? void 0 : _nextOption3.value) !== (activeOption === null || activeOption === void 0 ? void 0 : activeOption.value);\n    const currentValues = currentOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const nextValues = nextOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n\n    if (listIsUnchanged) {\n      if (optionIsAlreadyActive && actionContentHasUpdated) {\n        setCurrentOptions(nextOptions);\n        handleChangeActiveOption(nextOption);\n      }\n\n      return;\n    }\n\n    setCurrentOptions(nextOptions);\n\n    if (lazyLoading) {\n      setLazyLoading(false);\n      return;\n    }\n\n    handleChangeActiveOption(nextOption);\n  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);\n  useEffect(() => {\n    if (!loading && children && Children.count(children) > 0) {\n      resetActiveOption();\n    }\n  }, [children, activeOption, loading, resetActiveOption]);\n  useEffect(() => {\n    if (listboxRef.current) {\n      scrollableRef.current = listboxRef.current.closest(scrollable.selector);\n    }\n  }, []);\n  useEffect(() => {\n    if (enableKeyboardControl && !keyboardEventsEnabled) {\n      enableKeyboardEvents();\n    }\n  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);\n  const onOptionSelect = useCallback(option => {\n    handleChangeActiveOption(option);\n    if (onOptionSelected) onOptionSelected();\n    if (onSelect) onSelect(option.value);\n  }, [handleChangeActiveOption, onSelect, onOptionSelected]);\n  const getNextIndex = useCallback((currentIndex, lastIndex, direction) => {\n    let nextIndex;\n\n    if (direction === 'down') {\n      if (currentIndex === lastIndex) {\n        nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0;\n      } else {\n        nextIndex = currentIndex + 1;\n      }\n    } else {\n      nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n    }\n\n    return nextIndex;\n  }, [willLoadMoreOptions]);\n  const getNextValidOption = useCallback(async key => {\n    const lastIndex = currentOptions.length - 1;\n    let currentIndex = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.index) || 0;\n    let nextIndex = 0;\n    let element = activeOption === null || activeOption === void 0 ? void 0 : activeOption.element;\n    let totalOptions = -1;\n\n    while (totalOptions++ < lastIndex) {\n      var _element;\n\n      nextIndex = getNextIndex(currentIndex, lastIndex, key);\n      element = currentOptions[nextIndex];\n      const triggerLazyLoad = nextIndex >= lastIndex;\n      const isDisabled = ((_element = element) === null || _element === void 0 ? void 0 : _element.getAttribute('aria-disabled')) === 'true';\n\n      if (triggerLazyLoad && willLoadMoreOptions) {\n        await handleKeyToBottom();\n      }\n\n      if (isDisabled) {\n        currentIndex = nextIndex;\n        element = undefined;\n        continue;\n      }\n\n      break;\n    }\n\n    return {\n      element,\n      nextIndex\n    };\n  }, [currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom]);\n  const handleArrow = useCallback(async (type, event) => {\n    event.preventDefault();\n    const {\n      element,\n      nextIndex\n    } = await getNextValidOption(type);\n    if (!element) return;\n    const nextOption = getFormattedOption(element, nextIndex);\n    handleChangeActiveOption(nextOption);\n  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]);\n  const handleDownArrow = useCallback(event => {\n    handleArrow('down', event);\n  }, [handleArrow]);\n  const handleUpArrow = useCallback(event => {\n    handleArrow('up', event);\n  }, [handleArrow]);\n  const handleEnter = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (activeOption) {\n      onOptionSelect(activeOption);\n    }\n  }, [activeOption, onOptionSelect]);\n  const handleFocus = useCallback(() => {\n    if (enableKeyboardControl) return;\n    enableKeyboardEvents();\n  }, [enableKeyboardControl, enableKeyboardEvents]);\n  const handleBlur = useCallback(event => {\n    event.stopPropagation();\n\n    if (keyboardEventsEnabled) {\n      const nextActiveOption = getFirstNavigableOption(currentOptions);\n\n      if (nextActiveOption) {\n        const {\n          element,\n          index\n        } = nextActiveOption;\n        const nextOption = getFormattedOption(element, index);\n        handleChangeActiveOption(nextOption);\n      }\n    }\n\n    if (enableKeyboardControl) return;\n    disableKeyboardEvents();\n  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]);\n  const listeners = keyboardEventsEnabled || textFieldFocused ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.DownArrow,\n    handler: handleDownArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.UpArrow,\n    handler: handleUpArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.Enter,\n    handler: handleEnter\n  })) : null;\n  const listboxContext = useMemo(() => ({\n    onOptionSelect,\n    setLoading\n  }), [onOptionSelect]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, listeners, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\"\n  }, loading ? loading : null)), /*#__PURE__*/React.createElement(ListboxContext.Provider, {\n    value: listboxContext\n  }, /*#__PURE__*/React.createElement(WithinListboxContext.Provider, {\n    value: true\n  }, children ? /*#__PURE__*/React.createElement(\"ul\", {\n    tabIndex: 0,\n    role: \"listbox\",\n    className: styles.Listbox,\n    \"aria-label\": inCombobox ? undefined : accessibilityLabel,\n    \"aria-labelledby\": textFieldLabelId,\n    \"aria-busy\": Boolean(loading),\n    \"aria-activedescendant\": activeOption && activeOption.domId,\n    id: listId,\n    onFocus: inCombobox ? undefined : handleFocus,\n    onBlur: inCombobox ? undefined : handleBlur,\n    ref: listboxRef\n  }, children) : null)));\n}\n\nListbox.Option = Option;\nListbox.TextOption = TextOption;\nListbox.Loading = Loading;\nListbox.Section = Section;\nListbox.Header = Header;\nListbox.Action = Action;\nexport { AutoSelection, Listbox };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/Listbox/Listbox.js"],"names":["React","useState","useRef","useEffect","useCallback","Children","useMemo","debounce","useToggle","Key","scrollable","styles","useComboboxListbox","scrollOptionIntoView","ListboxContext","WithinListboxContext","TextOption","Loading","Section","Header","Action","useUniqueId","KeypressListener","VisuallyHidden","Option","AutoSelection","OPTION_SELECTOR","OPTION_VALUE_ATTRIBUTE","OPTION_ACTION_ATTRIBUTE","OPTION_FOCUS_ATTRIBUTE","Listbox","children","autoSelection","FirstSelected","enableKeyboardControl","accessibilityLabel","onSelect","onActiveOptionChange","loading","setLoading","activeOption","setActiveOption","lazyLoading","setLazyLoading","currentOptions","setCurrentOptions","value","keyboardEventsEnabled","setTrue","enableKeyboardEvents","setFalse","disableKeyboardEvents","Boolean","listId","scrollableRef","listboxRef","listboxId","textFieldLabelId","textFieldFocused","willLoadMoreOptions","setActiveOptionId","setListboxId","onOptionSelected","onKeyToBottom","inCombobox","getNavigableOptions","current","Set","querySelectorAll","getFirstNavigableOption","hasSelectedOptions","some","option","getAttribute","elementIndex","element","find","index","isInteractable","isFirstNavigableOption","isSelected","handleScrollIntoView","handleScrollIntoViewDebounced","handleKeyToBottom","Promise","resolve","handleChangeActiveOption","nextOption","undefined","removeAttribute","setAttribute","domId","getFormattedOption","id","disabled","isAction","resetActiveOption","_nextOption","_nextOption2","_nextOption3","nextOptions","nextActiveOption","length","optionIsAlreadyActive","actionContentHasUpdated","currentValues","map","nextValues","listIsUnchanged","every","count","closest","selector","onOptionSelect","getNextIndex","currentIndex","lastIndex","direction","nextIndex","getNextValidOption","key","totalOptions","_element","triggerLazyLoad","isDisabled","handleArrow","type","event","preventDefault","handleDownArrow","handleUpArrow","handleEnter","stopPropagation","handleFocus","handleBlur","listeners","createElement","Fragment","keyEvent","keyCode","DownArrow","handler","UpArrow","Enter","listboxContext","Provider","tabIndex","role","className","onFocus","onBlur","ref"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback, Children, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useToggle } from '../../utilities/use-toggle.js';\nimport { Key } from '../../types.js';\nimport { scrollable } from '../shared.js';\nimport styles from './Listbox.scss.js';\nimport { useComboboxListbox } from '../../utilities/combobox/hooks.js';\nimport { scrollOptionIntoView } from '../../utilities/listbox/utilities.js';\nimport { ListboxContext, WithinListboxContext } from '../../utilities/listbox/context.js';\nimport { TextOption } from './components/TextOption/TextOption.js';\nimport { Loading } from './components/Loading/Loading.js';\nimport { Section } from './components/Section/Section.js';\nimport { Header } from './components/Header/Header.js';\nimport { Action } from './components/Action/Action.js';\nimport { useUniqueId } from '../../utilities/unique-id/hooks.js';\nimport { KeypressListener } from '../KeypressListener/KeypressListener.js';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.js';\nimport { Option } from './components/Option/Option.js';\n\nlet AutoSelection;\n\n(function (AutoSelection) {\n  AutoSelection[\"FirstSelected\"] = \"FIRST_SELECTED\";\n  AutoSelection[\"First\"] = \"FIRST\";\n})(AutoSelection || (AutoSelection = {}));\n\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\nfunction Listbox({\n  children,\n  autoSelection = AutoSelection.FirstSelected,\n  enableKeyboardControl,\n  accessibilityLabel,\n  onSelect,\n  onActiveOptionChange\n}) {\n  const [loading, setLoading] = useState();\n  const [activeOption, setActiveOption] = useState();\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const {\n    value: keyboardEventsEnabled,\n    setTrue: enableKeyboardEvents,\n    setFalse: disableKeyboardEvents\n  } = useToggle(Boolean(enableKeyboardControl));\n  const listId = useUniqueId('Listbox');\n  const scrollableRef = useRef(null);\n  const listboxRef = useRef(null);\n  const {\n    listboxId,\n    textFieldLabelId,\n    textFieldFocused,\n    willLoadMoreOptions,\n    setActiveOptionId,\n    setListboxId,\n    onOptionSelected,\n    onKeyToBottom\n  } = useComboboxListbox();\n  const inCombobox = Boolean(setActiveOptionId);\n  useEffect(() => {\n    if (setListboxId && !listboxId) {\n      setListboxId(listId);\n    }\n  }, [setListboxId, listboxId, listId]);\n  const getNavigableOptions = useCallback(() => {\n    if (!listboxRef.current) {\n      return [];\n    }\n\n    return [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))];\n  }, []);\n  const getFirstNavigableOption = useCallback(currentOptions => {\n    const hasSelectedOptions = currentOptions.some(option => option.getAttribute('aria-selected') === 'true');\n    let elementIndex = 0;\n    const element = currentOptions.find((option, index) => {\n      const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n      let isFirstNavigableOption;\n\n      if (hasSelectedOptions && autoSelection === AutoSelection.FirstSelected) {\n        const isSelected = option.getAttribute('aria-selected') === 'true';\n        isFirstNavigableOption = isSelected && isInteractable;\n      } else {\n        isFirstNavigableOption = isInteractable;\n      }\n\n      if (isFirstNavigableOption) elementIndex = index;\n      return isFirstNavigableOption;\n    });\n    if (!element) return;\n    return {\n      element,\n      index: elementIndex\n    };\n  }, [autoSelection]);\n  const handleScrollIntoView = useCallback(option => {\n    const {\n      current: scrollable\n    } = scrollableRef;\n\n    if (scrollable) {\n      scrollOptionIntoView(option.element, scrollable);\n    }\n  }, []);\n  const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n  const handleKeyToBottom = useCallback(() => {\n    if (onKeyToBottom) {\n      setLazyLoading(true);\n      return Promise.resolve(onKeyToBottom());\n    }\n  }, [onKeyToBottom]);\n  const handleChangeActiveOption = useCallback(nextOption => {\n    if (!nextOption) return setActiveOption(undefined);\n    activeOption === null || activeOption === void 0 ? void 0 : activeOption.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n    nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n    handleScrollIntoViewDebounced(nextOption);\n    setActiveOption(nextOption);\n    setActiveOptionId === null || setActiveOptionId === void 0 ? void 0 : setActiveOptionId(nextOption.domId);\n    onActiveOptionChange === null || onActiveOptionChange === void 0 ? void 0 : onActiveOptionChange(nextOption.value);\n  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]);\n  const getFormattedOption = useCallback((element, index) => {\n    return {\n      element,\n      index,\n      domId: element.id,\n      value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n      disabled: element.getAttribute('aria-disabled') === 'true',\n      isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true'\n    };\n  }, []);\n  const resetActiveOption = useCallback(() => {\n    var _nextOption, _nextOption2, _nextOption3;\n\n    let nextOption;\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n\n    if (nextOptions.length === 0 && currentOptions.length > 0) {\n      setCurrentOptions(nextOptions);\n      handleChangeActiveOption();\n      return;\n    }\n\n    if (nextActiveOption) {\n      const {\n        element,\n        index\n      } = nextActiveOption;\n      nextOption = getFormattedOption(element, index);\n    }\n\n    const optionIsAlreadyActive = activeOption !== undefined && ((_nextOption = nextOption) === null || _nextOption === void 0 ? void 0 : _nextOption.domId) === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.domId);\n    const actionContentHasUpdated = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.isAction) && ((_nextOption2 = nextOption) === null || _nextOption2 === void 0 ? void 0 : _nextOption2.isAction) && ((_nextOption3 = nextOption) === null || _nextOption3 === void 0 ? void 0 : _nextOption3.value) !== (activeOption === null || activeOption === void 0 ? void 0 : activeOption.value);\n    const currentValues = currentOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const nextValues = nextOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n\n    if (listIsUnchanged) {\n      if (optionIsAlreadyActive && actionContentHasUpdated) {\n        setCurrentOptions(nextOptions);\n        handleChangeActiveOption(nextOption);\n      }\n\n      return;\n    }\n\n    setCurrentOptions(nextOptions);\n\n    if (lazyLoading) {\n      setLazyLoading(false);\n      return;\n    }\n\n    handleChangeActiveOption(nextOption);\n  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);\n  useEffect(() => {\n    if (!loading && children && Children.count(children) > 0) {\n      resetActiveOption();\n    }\n  }, [children, activeOption, loading, resetActiveOption]);\n  useEffect(() => {\n    if (listboxRef.current) {\n      scrollableRef.current = listboxRef.current.closest(scrollable.selector);\n    }\n  }, []);\n  useEffect(() => {\n    if (enableKeyboardControl && !keyboardEventsEnabled) {\n      enableKeyboardEvents();\n    }\n  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);\n  const onOptionSelect = useCallback(option => {\n    handleChangeActiveOption(option);\n    if (onOptionSelected) onOptionSelected();\n    if (onSelect) onSelect(option.value);\n  }, [handleChangeActiveOption, onSelect, onOptionSelected]);\n  const getNextIndex = useCallback((currentIndex, lastIndex, direction) => {\n    let nextIndex;\n\n    if (direction === 'down') {\n      if (currentIndex === lastIndex) {\n        nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0;\n      } else {\n        nextIndex = currentIndex + 1;\n      }\n    } else {\n      nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n    }\n\n    return nextIndex;\n  }, [willLoadMoreOptions]);\n  const getNextValidOption = useCallback(async key => {\n    const lastIndex = currentOptions.length - 1;\n    let currentIndex = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.index) || 0;\n    let nextIndex = 0;\n    let element = activeOption === null || activeOption === void 0 ? void 0 : activeOption.element;\n    let totalOptions = -1;\n\n    while (totalOptions++ < lastIndex) {\n      var _element;\n\n      nextIndex = getNextIndex(currentIndex, lastIndex, key);\n      element = currentOptions[nextIndex];\n      const triggerLazyLoad = nextIndex >= lastIndex;\n      const isDisabled = ((_element = element) === null || _element === void 0 ? void 0 : _element.getAttribute('aria-disabled')) === 'true';\n\n      if (triggerLazyLoad && willLoadMoreOptions) {\n        await handleKeyToBottom();\n      }\n\n      if (isDisabled) {\n        currentIndex = nextIndex;\n        element = undefined;\n        continue;\n      }\n\n      break;\n    }\n\n    return {\n      element,\n      nextIndex\n    };\n  }, [currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom]);\n  const handleArrow = useCallback(async (type, event) => {\n    event.preventDefault();\n    const {\n      element,\n      nextIndex\n    } = await getNextValidOption(type);\n    if (!element) return;\n    const nextOption = getFormattedOption(element, nextIndex);\n    handleChangeActiveOption(nextOption);\n  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]);\n  const handleDownArrow = useCallback(event => {\n    handleArrow('down', event);\n  }, [handleArrow]);\n  const handleUpArrow = useCallback(event => {\n    handleArrow('up', event);\n  }, [handleArrow]);\n  const handleEnter = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (activeOption) {\n      onOptionSelect(activeOption);\n    }\n  }, [activeOption, onOptionSelect]);\n  const handleFocus = useCallback(() => {\n    if (enableKeyboardControl) return;\n    enableKeyboardEvents();\n  }, [enableKeyboardControl, enableKeyboardEvents]);\n  const handleBlur = useCallback(event => {\n    event.stopPropagation();\n\n    if (keyboardEventsEnabled) {\n      const nextActiveOption = getFirstNavigableOption(currentOptions);\n\n      if (nextActiveOption) {\n        const {\n          element,\n          index\n        } = nextActiveOption;\n        const nextOption = getFormattedOption(element, index);\n        handleChangeActiveOption(nextOption);\n      }\n    }\n\n    if (enableKeyboardControl) return;\n    disableKeyboardEvents();\n  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]);\n  const listeners = keyboardEventsEnabled || textFieldFocused ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.DownArrow,\n    handler: handleDownArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.UpArrow,\n    handler: handleUpArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.Enter,\n    handler: handleEnter\n  })) : null;\n  const listboxContext = useMemo(() => ({\n    onOptionSelect,\n    setLoading\n  }), [onOptionSelect]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, listeners, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\"\n  }, loading ? loading : null)), /*#__PURE__*/React.createElement(ListboxContext.Provider, {\n    value: listboxContext\n  }, /*#__PURE__*/React.createElement(WithinListboxContext.Provider, {\n    value: true\n  }, children ? /*#__PURE__*/React.createElement(\"ul\", {\n    tabIndex: 0,\n    role: \"listbox\",\n    className: styles.Listbox,\n    \"aria-label\": inCombobox ? undefined : accessibilityLabel,\n    \"aria-labelledby\": textFieldLabelId,\n    \"aria-busy\": Boolean(loading),\n    \"aria-activedescendant\": activeOption && activeOption.domId,\n    id: listId,\n    onFocus: inCombobox ? undefined : handleFocus,\n    onBlur: inCombobox ? undefined : handleBlur,\n    ref: listboxRef\n  }, children) : null)));\n}\nListbox.Option = Option;\nListbox.TextOption = TextOption;\nListbox.Loading = Loading;\nListbox.Section = Section;\nListbox.Header = Header;\nListbox.Action = Action;\n\nexport { AutoSelection, Listbox };\n"]},"metadata":{},"sourceType":"module"}