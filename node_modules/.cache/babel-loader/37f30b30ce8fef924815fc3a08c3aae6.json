{"ast":null,"code":"import React, { memo, useCallback, useMemo, useRef } from 'react';\nimport { useToggle } from '../../../../utilities/use-toggle.js';\nimport { classNames, variationName } from '../../../../utilities/css.js';\nimport styles from '../../IndexTable.scss.js';\nimport { useIndexRow, useIndexSelectionChange } from '../../../../utilities/index-provider/hooks.js';\nimport { SelectionType } from '../../../../utilities/index-provider/types.js';\nimport { Checkbox } from '../Checkbox/Checkbox.js';\nimport { RowContext, RowHoveredContext } from '../../../../utilities/index-table/context.js';\nvar Row = /*#__PURE__*/memo(function Row(_ref) {\n  var children = _ref.children,\n      selected = _ref.selected,\n      id = _ref.id,\n      position = _ref.position,\n      subdued = _ref.subdued,\n      status = _ref.status,\n      onNavigation = _ref.onNavigation;\n\n  var _useIndexRow = useIndexRow(),\n      selectable = _useIndexRow.selectable,\n      selectMode = _useIndexRow.selectMode,\n      condensed = _useIndexRow.condensed;\n\n  var onSelectionChange = useIndexSelectionChange();\n\n  var _useToggle = useToggle(false),\n      hovered = _useToggle.value,\n      setHoverIn = _useToggle.setTrue,\n      setHoverOut = _useToggle.setFalse;\n\n  var handleInteraction = useCallback(function (event) {\n    event.stopPropagation();\n    if ('key' in event && event.key !== ' ' || !onSelectionChange) return;\n    var selectionType = event.nativeEvent.shiftKey ? SelectionType.Multi : SelectionType.Single;\n    onSelectionChange(selectionType, !selected, id, position);\n  }, [id, onSelectionChange, position, selected]);\n  var contextValue = useMemo(function () {\n    return {\n      itemId: id,\n      selected: selected,\n      onInteraction: handleInteraction\n    };\n  }, [id, selected, handleInteraction]);\n  var primaryLinkElement = useRef(null);\n  var isNavigating = useRef(false);\n  var tableRowRef = useRef(null);\n  var tableRowCallbackRef = useCallback(function (node) {\n    tableRowRef.current = node;\n    var el = node === null || node === void 0 ? void 0 : node.querySelector('[data-primary-link]');\n\n    if (el) {\n      primaryLinkElement.current = el;\n    }\n  }, []);\n  var rowClassName = classNames(styles.TableRow, selectable && condensed && styles.condensedRow, selected && styles['TableRow-selected'], subdued && styles['TableRow-subdued'], hovered && styles['TableRow-hovered'], status && styles[variationName('status', status)], !selectable && !primaryLinkElement.current && styles['TableRow-unclickable']);\n  var handleRowClick;\n\n  if (selectable || primaryLinkElement.current) {\n    handleRowClick = function handleRowClick(event) {\n      if (!tableRowRef.current || isNavigating.current) {\n        return;\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (primaryLinkElement.current && !selectMode) {\n        isNavigating.current = true;\n        var _event$nativeEvent = event.nativeEvent,\n            ctrlKey = _event$nativeEvent.ctrlKey,\n            metaKey = _event$nativeEvent.metaKey;\n\n        if (onNavigation) {\n          onNavigation(id);\n        }\n\n        if ((ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {\n          isNavigating.current = false;\n          window.open(primaryLinkElement.current.href, '_blank');\n          return;\n        }\n\n        primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));\n      } else {\n        isNavigating.current = false;\n        handleInteraction(event);\n      }\n    };\n  }\n\n  var RowWrapper = condensed ? 'li' : 'tr';\n  var checkboxMarkup = selectable ? /*#__PURE__*/React.createElement(Checkbox, null) : null;\n  return /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(RowHoveredContext.Provider, {\n    value: hovered\n  }, /*#__PURE__*/React.createElement(RowWrapper, {\n    key: id,\n    className: rowClassName,\n    onMouseEnter: setHoverIn,\n    onMouseLeave: setHoverOut,\n    onClick: handleRowClick,\n    ref: tableRowCallbackRef\n  }, checkboxMarkup, children)));\n});\nexport { Row };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Row/Row.js"],"names":["React","memo","useCallback","useMemo","useRef","useToggle","classNames","variationName","styles","useIndexRow","useIndexSelectionChange","SelectionType","Checkbox","RowContext","RowHoveredContext","Row","children","selected","id","position","subdued","status","onNavigation","selectable","selectMode","condensed","onSelectionChange","hovered","value","setHoverIn","setTrue","setHoverOut","setFalse","handleInteraction","event","stopPropagation","key","selectionType","nativeEvent","shiftKey","Multi","Single","contextValue","itemId","onInteraction","primaryLinkElement","isNavigating","tableRowRef","tableRowCallbackRef","node","current","el","querySelector","rowClassName","TableRow","condensedRow","handleRowClick","preventDefault","ctrlKey","metaKey","HTMLAnchorElement","window","open","href","dispatchEvent","MouseEvent","type","RowWrapper","checkboxMarkup","createElement","Provider","className","onMouseEnter","onMouseLeave","onClick","ref"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useMemo, useRef } from 'react';\nimport { useToggle } from '../../../../utilities/use-toggle.js';\nimport { classNames, variationName } from '../../../../utilities/css.js';\nimport styles from '../../IndexTable.scss.js';\nimport { useIndexRow, useIndexSelectionChange } from '../../../../utilities/index-provider/hooks.js';\nimport { SelectionType } from '../../../../utilities/index-provider/types.js';\nimport { Checkbox } from '../Checkbox/Checkbox.js';\nimport { RowContext, RowHoveredContext } from '../../../../utilities/index-table/context.js';\n\nconst Row = /*#__PURE__*/memo(function Row({\n  children,\n  selected,\n  id,\n  position,\n  subdued,\n  status,\n  onNavigation\n}) {\n  const {\n    selectable,\n    selectMode,\n    condensed\n  } = useIndexRow();\n  const onSelectionChange = useIndexSelectionChange();\n  const {\n    value: hovered,\n    setTrue: setHoverIn,\n    setFalse: setHoverOut\n  } = useToggle(false);\n  const handleInteraction = useCallback(event => {\n    event.stopPropagation();\n    if ('key' in event && event.key !== ' ' || !onSelectionChange) return;\n    const selectionType = event.nativeEvent.shiftKey ? SelectionType.Multi : SelectionType.Single;\n    onSelectionChange(selectionType, !selected, id, position);\n  }, [id, onSelectionChange, position, selected]);\n  const contextValue = useMemo(() => ({\n    itemId: id,\n    selected,\n    onInteraction: handleInteraction\n  }), [id, selected, handleInteraction]);\n  const primaryLinkElement = useRef(null);\n  const isNavigating = useRef(false);\n  const tableRowRef = useRef(null);\n  const tableRowCallbackRef = useCallback(node => {\n    tableRowRef.current = node;\n    const el = node === null || node === void 0 ? void 0 : node.querySelector('[data-primary-link]');\n\n    if (el) {\n      primaryLinkElement.current = el;\n    }\n  }, []);\n  const rowClassName = classNames(styles.TableRow, selectable && condensed && styles.condensedRow, selected && styles['TableRow-selected'], subdued && styles['TableRow-subdued'], hovered && styles['TableRow-hovered'], status && styles[variationName('status', status)], !selectable && !primaryLinkElement.current && styles['TableRow-unclickable']);\n  let handleRowClick;\n\n  if (selectable || primaryLinkElement.current) {\n    handleRowClick = event => {\n      if (!tableRowRef.current || isNavigating.current) {\n        return;\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (primaryLinkElement.current && !selectMode) {\n        isNavigating.current = true;\n        const {\n          ctrlKey,\n          metaKey\n        } = event.nativeEvent;\n\n        if (onNavigation) {\n          onNavigation(id);\n        }\n\n        if ((ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {\n          isNavigating.current = false;\n          window.open(primaryLinkElement.current.href, '_blank');\n          return;\n        }\n\n        primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));\n      } else {\n        isNavigating.current = false;\n        handleInteraction(event);\n      }\n    };\n  }\n\n  const RowWrapper = condensed ? 'li' : 'tr';\n  const checkboxMarkup = selectable ? /*#__PURE__*/React.createElement(Checkbox, null) : null;\n  return /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(RowHoveredContext.Provider, {\n    value: hovered\n  }, /*#__PURE__*/React.createElement(RowWrapper, {\n    key: id,\n    className: rowClassName,\n    onMouseEnter: setHoverIn,\n    onMouseLeave: setHoverOut,\n    onClick: handleRowClick,\n    ref: tableRowCallbackRef\n  }, checkboxMarkup, children)));\n});\n\nexport { Row };\n"]},"metadata":{},"sourceType":"module"}