{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NonSnakeCaseGroup = exports.findMatchInEnum = exports.forEachInEnum = exports.getMergedProps = exports.updateActionFromPayload = exports.isValidOptionalString = exports.isValidOptionalNumber = exports.getEventNameSpace = exports.getVersion = exports.actionWrapper = void 0;\n\nvar constants_1 = require(\"./constants\");\n\nvar merge_1 = __importDefault(require(\"./merge\"));\n\nvar types_1 = require(\"./types\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nvar packageJson = require('../package.json');\n\nfunction actionWrapper(action) {\n  return __assign(__assign({}, action), {\n    version: getVersion(),\n    clientInterface: {\n      name: packageJson.name,\n      version: getVersion()\n    }\n  });\n}\n\nexports.actionWrapper = actionWrapper;\n\nfunction getVersion() {\n  return packageJson.version;\n}\n\nexports.getVersion = getVersion;\n/**\n * Returns full event name with prefix, group, subgroups and type formatted with separators\n * @internal\n * */\n\nfunction getEventNameSpace(group, eventName, component) {\n  if (eventName.startsWith(\"\" + constants_1.PREFIX + constants_1.SEPARATOR)) {\n    return eventName;\n  }\n\n  var eventNameSpace = groupToEventNameSpace(group);\n\n  if (component) {\n    var subgroups_1 = component.subgroups,\n        type = component.type;\n\n    if (subgroups_1 && subgroups_1.length > 0) {\n      eventNameSpace += eventNameSpace.length > 0 ? constants_1.SEPARATOR : '';\n      subgroups_1.forEach(function (subgroup, index) {\n        eventNameSpace += \"\" + subgroup.toUpperCase() + (index < subgroups_1.length - 1 ? constants_1.SEPARATOR : '');\n      });\n    }\n\n    if (type !== group && type) {\n      eventNameSpace += \"\" + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : '') + type.toUpperCase();\n    }\n  }\n\n  if (eventNameSpace) {\n    eventNameSpace += \"\" + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : '') + eventName.toUpperCase();\n  }\n\n  return \"\" + constants_1.PREFIX + constants_1.SEPARATOR + eventNameSpace;\n}\n\nexports.getEventNameSpace = getEventNameSpace;\n\nfunction isValidOptionalNumber(value) {\n  return value === null || value === undefined || typeof value === 'number';\n}\n\nexports.isValidOptionalNumber = isValidOptionalNumber;\n\nfunction isValidOptionalString(value) {\n  return value === null || value === undefined || typeof value === 'string';\n}\n\nexports.isValidOptionalString = isValidOptionalString;\n\nfunction updateActionFromPayload(action, newProps) {\n  var id = action.id;\n\n  if (id === newProps.id) {\n    // Merge new properties\n    Object.assign(action, getMergedProps(action, newProps));\n    return true;\n  }\n\n  return false;\n}\n\nexports.updateActionFromPayload = updateActionFromPayload;\n\nfunction getMergedProps(props, newProps) {\n  var merged = merge_1.default(props, newProps);\n\n  if (!merged) {\n    // tslint:disable-next-line:prefer-object-spread\n    var cloned = Object.assign(props, newProps);\n    return cloned;\n  }\n\n  return merged;\n}\n\nexports.getMergedProps = getMergedProps;\n\nfunction forEachInEnum(types, callback) {\n  Object.keys(types).forEach(function (key) {\n    callback(types[key]);\n  });\n}\n\nexports.forEachInEnum = forEachInEnum;\n\nfunction findMatchInEnum(types, lookup) {\n  var match = Object.keys(types).find(function (key) {\n    return lookup === types[key];\n  });\n  return match ? types[match] : undefined;\n}\n\nexports.findMatchInEnum = findMatchInEnum;\n\nfunction camelCaseToSnakeCase(value) {\n  return value.replace(/([A-Z])/g, function (matcher, _val, index) {\n    return \"\" + (index === 0 ? '' : '_') + matcher[0].toLowerCase();\n  });\n}\n\nexports.NonSnakeCaseGroup = [types_1.Group.AuthCode, types_1.Group.Button, types_1.Group.ButtonGroup, types_1.Group.Cart, types_1.Group.Error, types_1.Group.Features, types_1.Group.Fullscreen, types_1.Group.Link, types_1.Group.Loading, types_1.Group.Menu, types_1.Group.Modal, types_1.Group.Navigation, types_1.Group.Pos, types_1.Group.Print, types_1.Group.ResourcePicker, types_1.Group.Scanner, types_1.Group.SessionToken, types_1.Group.Share, types_1.Group.TitleBar, types_1.Group.Toast];\n/**\n * Maps the group name to its event name\n * @internal\n * @remarks - This method is necessary for the new pattern of using snake case\n * which makes it more readable and easier to reconstruct the group from an event name.\n * Example: `ContextualSaveBar` becomes `CONTEXTUAL_SAVE_BAR`\n * */\n\nfunction groupToEventNameSpace(group) {\n  if (exports.NonSnakeCaseGroup.includes(group)) {\n    return group.toUpperCase();\n  }\n\n  return camelCaseToSnakeCase(group).toUpperCase();\n}","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/app-bridge/actions/helper.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","NonSnakeCaseGroup","findMatchInEnum","forEachInEnum","getMergedProps","updateActionFromPayload","isValidOptionalString","isValidOptionalNumber","getEventNameSpace","getVersion","actionWrapper","constants_1","require","merge_1","types_1","packageJson","action","version","clientInterface","name","group","eventName","component","startsWith","PREFIX","SEPARATOR","eventNameSpace","groupToEventNameSpace","subgroups_1","subgroups","type","forEach","subgroup","index","toUpperCase","undefined","newProps","id","props","merged","default","cloned","types","callback","keys","key","lookup","match","find","camelCaseToSnakeCase","replace","matcher","_val","toLowerCase","Group","AuthCode","Button","ButtonGroup","Cart","Error","Features","Fullscreen","Link","Loading","Menu","Modal","Navigation","Pos","Print","ResourcePicker","Scanner","SessionToken","Share","TitleBar","Toast","includes"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonSnakeCaseGroup = exports.findMatchInEnum = exports.forEachInEnum = exports.getMergedProps = exports.updateActionFromPayload = exports.isValidOptionalString = exports.isValidOptionalNumber = exports.getEventNameSpace = exports.getVersion = exports.actionWrapper = void 0;\nvar constants_1 = require(\"./constants\");\nvar merge_1 = __importDefault(require(\"./merge\"));\nvar types_1 = require(\"./types\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar packageJson = require('../package.json');\nfunction actionWrapper(action) {\n    return __assign(__assign({}, action), { version: getVersion(), clientInterface: {\n            name: packageJson.name,\n            version: getVersion(),\n        } });\n}\nexports.actionWrapper = actionWrapper;\nfunction getVersion() {\n    return packageJson.version;\n}\nexports.getVersion = getVersion;\n/**\n * Returns full event name with prefix, group, subgroups and type formatted with separators\n * @internal\n * */\nfunction getEventNameSpace(group, eventName, component) {\n    if (eventName.startsWith(\"\" + constants_1.PREFIX + constants_1.SEPARATOR)) {\n        return eventName;\n    }\n    var eventNameSpace = groupToEventNameSpace(group);\n    if (component) {\n        var subgroups_1 = component.subgroups, type = component.type;\n        if (subgroups_1 && subgroups_1.length > 0) {\n            eventNameSpace += eventNameSpace.length > 0 ? constants_1.SEPARATOR : '';\n            subgroups_1.forEach(function (subgroup, index) {\n                eventNameSpace += \"\" + subgroup.toUpperCase() + (index < subgroups_1.length - 1 ? constants_1.SEPARATOR : '');\n            });\n        }\n        if (type !== group && type) {\n            eventNameSpace += \"\" + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : '') + type.toUpperCase();\n        }\n    }\n    if (eventNameSpace) {\n        eventNameSpace += \"\" + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : '') + eventName.toUpperCase();\n    }\n    return \"\" + constants_1.PREFIX + constants_1.SEPARATOR + eventNameSpace;\n}\nexports.getEventNameSpace = getEventNameSpace;\nfunction isValidOptionalNumber(value) {\n    return value === null || value === undefined || typeof value === 'number';\n}\nexports.isValidOptionalNumber = isValidOptionalNumber;\nfunction isValidOptionalString(value) {\n    return value === null || value === undefined || typeof value === 'string';\n}\nexports.isValidOptionalString = isValidOptionalString;\nfunction updateActionFromPayload(action, newProps) {\n    var id = action.id;\n    if (id === newProps.id) {\n        // Merge new properties\n        Object.assign(action, getMergedProps(action, newProps));\n        return true;\n    }\n    return false;\n}\nexports.updateActionFromPayload = updateActionFromPayload;\nfunction getMergedProps(props, newProps) {\n    var merged = merge_1.default(props, newProps);\n    if (!merged) {\n        // tslint:disable-next-line:prefer-object-spread\n        var cloned = Object.assign(props, newProps);\n        return cloned;\n    }\n    return merged;\n}\nexports.getMergedProps = getMergedProps;\nfunction forEachInEnum(types, callback) {\n    Object.keys(types).forEach(function (key) {\n        callback(types[key]);\n    });\n}\nexports.forEachInEnum = forEachInEnum;\nfunction findMatchInEnum(types, lookup) {\n    var match = Object.keys(types).find(function (key) {\n        return lookup === types[key];\n    });\n    return match ? types[match] : undefined;\n}\nexports.findMatchInEnum = findMatchInEnum;\nfunction camelCaseToSnakeCase(value) {\n    return value.replace(/([A-Z])/g, function (matcher, _val, index) {\n        return \"\" + (index === 0 ? '' : '_') + matcher[0].toLowerCase();\n    });\n}\nexports.NonSnakeCaseGroup = [\n    types_1.Group.AuthCode,\n    types_1.Group.Button,\n    types_1.Group.ButtonGroup,\n    types_1.Group.Cart,\n    types_1.Group.Error,\n    types_1.Group.Features,\n    types_1.Group.Fullscreen,\n    types_1.Group.Link,\n    types_1.Group.Loading,\n    types_1.Group.Menu,\n    types_1.Group.Modal,\n    types_1.Group.Navigation,\n    types_1.Group.Pos,\n    types_1.Group.Print,\n    types_1.Group.ResourcePicker,\n    types_1.Group.Scanner,\n    types_1.Group.SessionToken,\n    types_1.Group.Share,\n    types_1.Group.TitleBar,\n    types_1.Group.Toast,\n];\n/**\n * Maps the group name to its event name\n * @internal\n * @remarks - This method is necessary for the new pattern of using snake case\n * which makes it more readable and easier to reconstruct the group from an event name.\n * Example: `ContextualSaveBar` becomes `CONTEXTUAL_SAVE_BAR`\n * */\nfunction groupToEventNameSpace(group) {\n    if (exports.NonSnakeCaseGroup.includes(group)) {\n        return group.toUpperCase();\n    }\n    return camelCaseToSnakeCase(group).toUpperCase();\n}\n"]},"metadata":{},"sourceType":"script"}