{"ast":null,"code":"import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Collapsible.scss.js';\n\nfunction Collapsible(_ref) {\n  let {\n    id,\n    expandOnPrint,\n    open,\n    transition,\n    children\n  } = _ref;\n  const [height, setHeight] = useState(0);\n  const [isOpen, setIsOpen] = useState(open);\n  const [animationState, setAnimationState] = useState('idle');\n  const collapsibleContainer = useRef(null);\n  const isFullyOpen = animationState === 'idle' && open && isOpen;\n  const isFullyClosed = animationState === 'idle' && !open && !isOpen;\n  const content = expandOnPrint || !isFullyClosed ? children : null;\n  const wrapperClassName = classNames(styles.Collapsible, isFullyClosed && styles.isFullyClosed, expandOnPrint && styles.expandOnPrint);\n  const collapsibleStyles = { ...(transition && {\n      transitionDuration: `${transition.duration}`,\n      transitionTimingFunction: `${transition.timingFunction}`\n    }),\n    ...{\n      maxHeight: isFullyOpen ? 'none' : `${height}px`,\n      overflow: isFullyOpen ? 'visible' : 'hidden'\n    }\n  };\n  const handleCompleteAnimation = useCallback(_ref2 => {\n    let {\n      target\n    } = _ref2;\n\n    if (target === collapsibleContainer.current) {\n      setAnimationState('idle');\n      setIsOpen(open);\n    }\n  }, [open]);\n  useEffect(() => {\n    if (open !== isOpen) {\n      setAnimationState('measuring');\n    }\n  }, [open, isOpen]);\n  useEffect(() => {\n    if (!open || !collapsibleContainer.current) return; // If collapsible defaults to open, set an initial height\n\n    setHeight(collapsibleContainer.current.scrollHeight); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (!collapsibleContainer.current) return;\n\n    switch (animationState) {\n      case 'idle':\n        break;\n\n      case 'measuring':\n        setHeight(collapsibleContainer.current.scrollHeight);\n        setAnimationState('animating');\n        break;\n\n      case 'animating':\n        setHeight(open ? collapsibleContainer.current.scrollHeight : 0);\n    }\n  }, [animationState, open, isOpen]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    style: collapsibleStyles,\n    ref: collapsibleContainer,\n    className: wrapperClassName,\n    onTransitionEnd: handleCompleteAnimation,\n    \"aria-expanded\": open\n  }, content);\n}\n\nexport { Collapsible };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/Collapsible/Collapsible.js"],"names":["React","useState","useRef","useCallback","useEffect","classNames","styles","Collapsible","id","expandOnPrint","open","transition","children","height","setHeight","isOpen","setIsOpen","animationState","setAnimationState","collapsibleContainer","isFullyOpen","isFullyClosed","content","wrapperClassName","collapsibleStyles","transitionDuration","duration","transitionTimingFunction","timingFunction","maxHeight","overflow","handleCompleteAnimation","target","current","scrollHeight","createElement","style","ref","className","onTransitionEnd"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Collapsible.scss.js';\n\nfunction Collapsible({\n  id,\n  expandOnPrint,\n  open,\n  transition,\n  children\n}) {\n  const [height, setHeight] = useState(0);\n  const [isOpen, setIsOpen] = useState(open);\n  const [animationState, setAnimationState] = useState('idle');\n  const collapsibleContainer = useRef(null);\n  const isFullyOpen = animationState === 'idle' && open && isOpen;\n  const isFullyClosed = animationState === 'idle' && !open && !isOpen;\n  const content = expandOnPrint || !isFullyClosed ? children : null;\n  const wrapperClassName = classNames(styles.Collapsible, isFullyClosed && styles.isFullyClosed, expandOnPrint && styles.expandOnPrint);\n  const collapsibleStyles = { ...(transition && {\n      transitionDuration: `${transition.duration}`,\n      transitionTimingFunction: `${transition.timingFunction}`\n    }),\n    ...{\n      maxHeight: isFullyOpen ? 'none' : `${height}px`,\n      overflow: isFullyOpen ? 'visible' : 'hidden'\n    }\n  };\n  const handleCompleteAnimation = useCallback(({\n    target\n  }) => {\n    if (target === collapsibleContainer.current) {\n      setAnimationState('idle');\n      setIsOpen(open);\n    }\n  }, [open]);\n  useEffect(() => {\n    if (open !== isOpen) {\n      setAnimationState('measuring');\n    }\n  }, [open, isOpen]);\n  useEffect(() => {\n    if (!open || !collapsibleContainer.current) return; // If collapsible defaults to open, set an initial height\n\n    setHeight(collapsibleContainer.current.scrollHeight); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (!collapsibleContainer.current) return;\n\n    switch (animationState) {\n      case 'idle':\n        break;\n\n      case 'measuring':\n        setHeight(collapsibleContainer.current.scrollHeight);\n        setAnimationState('animating');\n        break;\n\n      case 'animating':\n        setHeight(open ? collapsibleContainer.current.scrollHeight : 0);\n    }\n  }, [animationState, open, isOpen]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    style: collapsibleStyles,\n    ref: collapsibleContainer,\n    className: wrapperClassName,\n    onTransitionEnd: handleCompleteAnimation,\n    \"aria-expanded\": open\n  }, content);\n}\n\nexport { Collapsible };\n"]},"metadata":{},"sourceType":"module"}