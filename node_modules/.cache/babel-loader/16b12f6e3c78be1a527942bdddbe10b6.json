{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useBulkSelectionData, useHandleBulkSelection } from '../../utilities/index-provider/hooks.js';\nimport { IndexContext, IndexRowContext, IndexSelectionChangeContext } from '../../utilities/index-provider/context.js';\n\nfunction IndexProvider(_ref) {\n  var children = _ref.children,\n      passedResourceName = _ref.resourceName,\n      loading = _ref.loading,\n      onSelectionChange = _ref.onSelectionChange,\n      _ref$selectedItemsCou = _ref.selectedItemsCount,\n      selectedItemsCount = _ref$selectedItemsCou === void 0 ? 0 : _ref$selectedItemsCou,\n      itemCount = _ref.itemCount,\n      hasMoreItems = _ref.hasMoreItems,\n      condensed = _ref.condensed,\n      _ref$selectable = _ref.selectable,\n      isSelectableIndex = _ref$selectable === void 0 ? true : _ref$selectable;\n\n  var _useBulkSelectionData = useBulkSelectionData({\n    selectedItemsCount: selectedItemsCount,\n    itemCount: itemCount,\n    hasMoreItems: hasMoreItems,\n    resourceName: passedResourceName\n  }),\n      paginatedSelectAllText = _useBulkSelectionData.paginatedSelectAllText,\n      bulkActionsLabel = _useBulkSelectionData.bulkActionsLabel,\n      bulkActionsAccessibilityLabel = _useBulkSelectionData.bulkActionsAccessibilityLabel,\n      resourceName = _useBulkSelectionData.resourceName,\n      selectMode = _useBulkSelectionData.selectMode,\n      bulkSelectState = _useBulkSelectionData.bulkSelectState;\n\n  var handleSelectionChange = useHandleBulkSelection({\n    onSelectionChange: onSelectionChange\n  });\n  var contextValue = useMemo(function () {\n    return {\n      itemCount: itemCount,\n      selectMode: selectMode && isSelectableIndex,\n      selectable: isSelectableIndex,\n      resourceName: resourceName,\n      loading: loading,\n      paginatedSelectAllText: paginatedSelectAllText,\n      hasMoreItems: hasMoreItems,\n      bulkActionsLabel: bulkActionsLabel,\n      bulkActionsAccessibilityLabel: bulkActionsAccessibilityLabel,\n      bulkSelectState: bulkSelectState,\n      selectedItemsCount: selectedItemsCount,\n      condensed: condensed\n    };\n  }, [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]);\n  var rowContextValue = useMemo(function () {\n    return {\n      selectable: isSelectableIndex,\n      selectMode: selectMode && isSelectableIndex,\n      condensed: condensed\n    };\n  }, [condensed, selectMode, isSelectableIndex]);\n  return /*#__PURE__*/React.createElement(IndexContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(IndexRowContext.Provider, {\n    value: rowContextValue\n  }, /*#__PURE__*/React.createElement(IndexSelectionChangeContext.Provider, {\n    value: handleSelectionChange\n  }, children)));\n}\n\nexport { IndexProvider };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/IndexProvider/IndexProvider.js"],"names":["React","useMemo","useBulkSelectionData","useHandleBulkSelection","IndexContext","IndexRowContext","IndexSelectionChangeContext","IndexProvider","children","passedResourceName","resourceName","loading","onSelectionChange","selectedItemsCount","itemCount","hasMoreItems","condensed","selectable","isSelectableIndex","paginatedSelectAllText","bulkActionsLabel","bulkActionsAccessibilityLabel","selectMode","bulkSelectState","handleSelectionChange","contextValue","rowContextValue","createElement","Provider","value"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { useBulkSelectionData, useHandleBulkSelection } from '../../utilities/index-provider/hooks.js';\nimport { IndexContext, IndexRowContext, IndexSelectionChangeContext } from '../../utilities/index-provider/context.js';\n\nfunction IndexProvider({\n  children,\n  resourceName: passedResourceName,\n  loading,\n  onSelectionChange,\n  selectedItemsCount = 0,\n  itemCount,\n  hasMoreItems,\n  condensed,\n  selectable: isSelectableIndex = true\n}) {\n  const {\n    paginatedSelectAllText,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    resourceName,\n    selectMode,\n    bulkSelectState\n  } = useBulkSelectionData({\n    selectedItemsCount,\n    itemCount,\n    hasMoreItems,\n    resourceName: passedResourceName\n  });\n  const handleSelectionChange = useHandleBulkSelection({\n    onSelectionChange\n  });\n  const contextValue = useMemo(() => ({\n    itemCount,\n    selectMode: selectMode && isSelectableIndex,\n    selectable: isSelectableIndex,\n    resourceName,\n    loading,\n    paginatedSelectAllText,\n    hasMoreItems,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    bulkSelectState,\n    selectedItemsCount,\n    condensed\n  }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]);\n  const rowContextValue = useMemo(() => ({\n    selectable: isSelectableIndex,\n    selectMode: selectMode && isSelectableIndex,\n    condensed\n  }), [condensed, selectMode, isSelectableIndex]);\n  return /*#__PURE__*/React.createElement(IndexContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(IndexRowContext.Provider, {\n    value: rowContextValue\n  }, /*#__PURE__*/React.createElement(IndexSelectionChangeContext.Provider, {\n    value: handleSelectionChange\n  }, children)));\n}\n\nexport { IndexProvider };\n"]},"metadata":{},"sourceType":"module"}