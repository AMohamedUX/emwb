{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useBulkSelectionData, useHandleBulkSelection } from '../../utilities/index-provider/hooks.js';\nimport { IndexContext, IndexRowContext, IndexSelectionChangeContext } from '../../utilities/index-provider/context.js';\n\nfunction IndexProvider(_ref) {\n  let {\n    children,\n    resourceName: passedResourceName,\n    loading,\n    onSelectionChange,\n    selectedItemsCount = 0,\n    itemCount,\n    hasMoreItems,\n    condensed,\n    selectable: isSelectableIndex = true\n  } = _ref;\n  const {\n    paginatedSelectAllText,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    resourceName,\n    selectMode,\n    bulkSelectState\n  } = useBulkSelectionData({\n    selectedItemsCount,\n    itemCount,\n    hasMoreItems,\n    resourceName: passedResourceName\n  });\n  const handleSelectionChange = useHandleBulkSelection({\n    onSelectionChange\n  });\n  const contextValue = useMemo(() => ({\n    itemCount,\n    selectMode: selectMode && isSelectableIndex,\n    selectable: isSelectableIndex,\n    resourceName,\n    loading,\n    paginatedSelectAllText,\n    hasMoreItems,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    bulkSelectState,\n    selectedItemsCount,\n    condensed\n  }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]);\n  const rowContextValue = useMemo(() => ({\n    selectable: isSelectableIndex,\n    selectMode: selectMode && isSelectableIndex,\n    condensed\n  }), [condensed, selectMode, isSelectableIndex]);\n  return /*#__PURE__*/React.createElement(IndexContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(IndexRowContext.Provider, {\n    value: rowContextValue\n  }, /*#__PURE__*/React.createElement(IndexSelectionChangeContext.Provider, {\n    value: handleSelectionChange\n  }, children)));\n}\n\nexport { IndexProvider };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/IndexProvider/IndexProvider.js"],"names":["React","useMemo","useBulkSelectionData","useHandleBulkSelection","IndexContext","IndexRowContext","IndexSelectionChangeContext","IndexProvider","children","resourceName","passedResourceName","loading","onSelectionChange","selectedItemsCount","itemCount","hasMoreItems","condensed","selectable","isSelectableIndex","paginatedSelectAllText","bulkActionsLabel","bulkActionsAccessibilityLabel","selectMode","bulkSelectState","handleSelectionChange","contextValue","rowContextValue","createElement","Provider","value"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,QAA6D,yCAA7D;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,2BAAxC,QAA2E,2CAA3E;;AAEA,SAASC,aAAT,OAUG;AAAA,MAVoB;AACrBC,IAAAA,QADqB;AAErBC,IAAAA,YAAY,EAAEC,kBAFO;AAGrBC,IAAAA,OAHqB;AAIrBC,IAAAA,iBAJqB;AAKrBC,IAAAA,kBAAkB,GAAG,CALA;AAMrBC,IAAAA,SANqB;AAOrBC,IAAAA,YAPqB;AAQrBC,IAAAA,SARqB;AASrBC,IAAAA,UAAU,EAAEC,iBAAiB,GAAG;AATX,GAUpB;AACD,QAAM;AACJC,IAAAA,sBADI;AAEJC,IAAAA,gBAFI;AAGJC,IAAAA,6BAHI;AAIJZ,IAAAA,YAJI;AAKJa,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFrB,oBAAoB,CAAC;AACvBW,IAAAA,kBADuB;AAEvBC,IAAAA,SAFuB;AAGvBC,IAAAA,YAHuB;AAIvBN,IAAAA,YAAY,EAAEC;AAJS,GAAD,CAPxB;AAaA,QAAMc,qBAAqB,GAAGrB,sBAAsB,CAAC;AACnDS,IAAAA;AADmD,GAAD,CAApD;AAGA,QAAMa,YAAY,GAAGxB,OAAO,CAAC,OAAO;AAClCa,IAAAA,SADkC;AAElCQ,IAAAA,UAAU,EAAEA,UAAU,IAAIJ,iBAFQ;AAGlCD,IAAAA,UAAU,EAAEC,iBAHsB;AAIlCT,IAAAA,YAJkC;AAKlCE,IAAAA,OALkC;AAMlCQ,IAAAA,sBANkC;AAOlCJ,IAAAA,YAPkC;AAQlCK,IAAAA,gBARkC;AASlCC,IAAAA,6BATkC;AAUlCE,IAAAA,eAVkC;AAWlCV,IAAAA,kBAXkC;AAYlCG,IAAAA;AAZkC,GAAP,CAAD,EAaxB,CAACF,SAAD,EAAYQ,UAAZ,EAAwBJ,iBAAxB,EAA2CT,YAA3C,EAAyDE,OAAzD,EAAkEQ,sBAAlE,EAA0FJ,YAA1F,EAAwGK,gBAAxG,EAA0HC,6BAA1H,EAAyJE,eAAzJ,EAA0KV,kBAA1K,EAA8LG,SAA9L,CAbwB,CAA5B;AAcA,QAAMU,eAAe,GAAGzB,OAAO,CAAC,OAAO;AACrCgB,IAAAA,UAAU,EAAEC,iBADyB;AAErCI,IAAAA,UAAU,EAAEA,UAAU,IAAIJ,iBAFW;AAGrCF,IAAAA;AAHqC,GAAP,CAAD,EAI3B,CAACA,SAAD,EAAYM,UAAZ,EAAwBJ,iBAAxB,CAJ2B,CAA/B;AAKA,SAAO,aAAalB,KAAK,CAAC2B,aAAN,CAAoBvB,YAAY,CAACwB,QAAjC,EAA2C;AAC7DC,IAAAA,KAAK,EAAEJ;AADsD,GAA3C,EAEjB,aAAazB,KAAK,CAAC2B,aAAN,CAAoBtB,eAAe,CAACuB,QAApC,EAA8C;AAC5DC,IAAAA,KAAK,EAAEH;AADqD,GAA9C,EAEb,aAAa1B,KAAK,CAAC2B,aAAN,CAAoBrB,2BAA2B,CAACsB,QAAhD,EAA0D;AACxEC,IAAAA,KAAK,EAAEL;AADiE,GAA1D,EAEbhB,QAFa,CAFA,CAFI,CAApB;AAOD;;AAED,SAASD,aAAT","sourcesContent":["import React, { useMemo } from 'react';\nimport { useBulkSelectionData, useHandleBulkSelection } from '../../utilities/index-provider/hooks.js';\nimport { IndexContext, IndexRowContext, IndexSelectionChangeContext } from '../../utilities/index-provider/context.js';\n\nfunction IndexProvider({\n  children,\n  resourceName: passedResourceName,\n  loading,\n  onSelectionChange,\n  selectedItemsCount = 0,\n  itemCount,\n  hasMoreItems,\n  condensed,\n  selectable: isSelectableIndex = true\n}) {\n  const {\n    paginatedSelectAllText,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    resourceName,\n    selectMode,\n    bulkSelectState\n  } = useBulkSelectionData({\n    selectedItemsCount,\n    itemCount,\n    hasMoreItems,\n    resourceName: passedResourceName\n  });\n  const handleSelectionChange = useHandleBulkSelection({\n    onSelectionChange\n  });\n  const contextValue = useMemo(() => ({\n    itemCount,\n    selectMode: selectMode && isSelectableIndex,\n    selectable: isSelectableIndex,\n    resourceName,\n    loading,\n    paginatedSelectAllText,\n    hasMoreItems,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    bulkSelectState,\n    selectedItemsCount,\n    condensed\n  }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]);\n  const rowContextValue = useMemo(() => ({\n    selectable: isSelectableIndex,\n    selectMode: selectMode && isSelectableIndex,\n    condensed\n  }), [condensed, selectMode, isSelectableIndex]);\n  return /*#__PURE__*/React.createElement(IndexContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(IndexRowContext.Provider, {\n    value: rowContextValue\n  }, /*#__PURE__*/React.createElement(IndexSelectionChangeContext.Provider, {\n    value: handleSelectionChange\n  }, children)));\n}\n\nexport { IndexProvider };\n"]},"metadata":{},"sourceType":"module"}