{"ast":null,"code":"import React, { PureComponent, createRef } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport { classNames } from '../../utilities/css.js';\nimport { clamp } from '../../utilities/clamp.js';\nimport styles from './BulkActions.scss.js';\nimport { BulkActionMenu } from './components/BulkActionMenu/BulkActionMenu.js';\nimport { CheckableButton } from '../CheckableButton/CheckableButton.js';\nimport { useI18n } from '../../utilities/i18n/hooks.js';\nimport { Button } from '../Button/Button.js';\nimport { Popover } from '../Popover/Popover.js';\nimport { BulkActionButton } from './components/BulkActionButton/BulkActionButton.js';\nimport { ActionList } from '../ActionList/ActionList.js';\nimport { ButtonGroup } from '../ButtonGroup/ButtonGroup.js';\nimport { tokens } from '../../tokens/tokens.js';\nimport { EventListener } from '../EventListener/EventListener.js';\nconst MAX_PROMOTED_ACTIONS = 2;\nconst slideClasses = {\n  appear: classNames(styles.Slide, styles['Slide-appear']),\n  appearActive: classNames(styles.Slide, styles['Slide-appearing']),\n  enter: classNames(styles.Slide, styles['Slide-enter']),\n  enterActive: classNames(styles.Slide, styles['Slide-entering']),\n  exit: classNames(styles.Slide, styles['Slide-exit'])\n};\n\nclass BulkActionsInner extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      smallScreenPopoverVisible: false,\n      largeScreenPopoverVisible: false,\n      containerWidth: 0,\n      measuring: true\n    };\n    this.containerNode = null;\n    this.largeScreenButtonsNode = null;\n    this.moreActionsNode = null;\n    this.checkableWrapperNode = /*#__PURE__*/createRef();\n    this.largeScreenGroupNode = /*#__PURE__*/createRef();\n    this.smallScreenGroupNode = /*#__PURE__*/createRef();\n    this.promotedActionsWidths = [];\n    this.bulkActionsWidth = 0;\n    this.addedMoreActionsWidthForMeasuring = 0;\n    this.handleResize = debounce(() => {\n      const {\n        smallScreenPopoverVisible,\n        largeScreenPopoverVisible\n      } = this.state;\n\n      if (this.containerNode) {\n        const containerWidth = this.containerNode.getBoundingClientRect().width;\n\n        if (containerWidth > 0) {\n          this.setState({\n            containerWidth\n          });\n        }\n      }\n\n      if (smallScreenPopoverVisible || largeScreenPopoverVisible) {\n        this.setState({\n          smallScreenPopoverVisible: false,\n          largeScreenPopoverVisible: false\n        });\n      }\n    }, 50, {\n      trailing: true\n    });\n\n    this.setLargeScreenButtonsNode = node => {\n      this.largeScreenButtonsNode = node;\n    };\n\n    this.setContainerNode = node => {\n      this.containerNode = node;\n    };\n\n    this.setMoreActionsNode = node => {\n      this.moreActionsNode = node;\n    };\n\n    this.setSelectMode = val => {\n      const {\n        onSelectModeToggle\n      } = this.props;\n\n      if (onSelectModeToggle) {\n        onSelectModeToggle(val);\n      }\n    };\n\n    this.toggleSmallScreenPopover = () => {\n      if (this.props.onMoreActionPopoverToggle) {\n        this.props.onMoreActionPopoverToggle(this.state.smallScreenPopoverVisible);\n      }\n\n      this.setState(_ref => {\n        let {\n          smallScreenPopoverVisible\n        } = _ref;\n        return {\n          smallScreenPopoverVisible: !smallScreenPopoverVisible\n        };\n      });\n    };\n\n    this.toggleLargeScreenPopover = () => {\n      if (this.props.onMoreActionPopoverToggle) {\n        this.props.onMoreActionPopoverToggle(this.state.largeScreenPopoverVisible);\n      }\n\n      this.setState(_ref2 => {\n        let {\n          largeScreenPopoverVisible\n        } = _ref2;\n        return {\n          largeScreenPopoverVisible: !largeScreenPopoverVisible\n        };\n      });\n    };\n\n    this.handleMeasurement = width => {\n      const {\n        measuring\n      } = this.state;\n\n      if (measuring) {\n        this.promotedActionsWidths.push(width);\n      }\n    };\n  }\n\n  numberOfPromotedActionsToRender() {\n    const {\n      promotedActions\n    } = this.props;\n    const {\n      containerWidth,\n      measuring\n    } = this.state;\n\n    if (!promotedActions) {\n      return 0;\n    }\n\n    if (containerWidth >= this.bulkActionsWidth || measuring) {\n      return promotedActions.length;\n    }\n\n    let sufficientSpace = false;\n    let counter = promotedActions.length - 1;\n    let totalWidth = 0;\n\n    while (!sufficientSpace && counter >= 0) {\n      totalWidth += this.promotedActionsWidths[counter];\n      const widthWithRemovedAction = this.bulkActionsWidth - totalWidth + this.addedMoreActionsWidthForMeasuring;\n\n      if (containerWidth >= widthWithRemovedAction) {\n        sufficientSpace = true;\n      } else {\n        counter--;\n      }\n    }\n\n    return clamp(counter, 0, promotedActions.length);\n  }\n\n  hasActions() {\n    const {\n      promotedActions,\n      actions\n    } = this.props;\n    return Boolean(promotedActions && promotedActions.length > 0 || actions && actions.length > 0);\n  }\n\n  actionSections() {\n    const {\n      actions\n    } = this.props;\n\n    if (!actions || actions.length === 0) {\n      return;\n    }\n\n    if (instanceOfBulkActionListSectionArray(actions)) {\n      return actions;\n    }\n\n    if (instanceOfBulkActionArray(actions)) {\n      return [{\n        items: actions\n      }];\n    }\n  }\n\n  rolledInPromotedActions() {\n    const {\n      promotedActions\n    } = this.props;\n    const numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();\n\n    if (!promotedActions || promotedActions.length === 0 || numberOfPromotedActionsToRender >= promotedActions.length) {\n      return [];\n    }\n\n    const rolledInPromotedActions = promotedActions.map(action => {\n      if (instanceOfMenuGroupDescriptor(action)) {\n        return {\n          items: [...action.actions]\n        };\n      }\n\n      return {\n        items: [action]\n      };\n    });\n    return rolledInPromotedActions.slice(numberOfPromotedActionsToRender);\n  } // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  componentDidMount() {\n    const {\n      actions,\n      promotedActions\n    } = this.props;\n\n    if (promotedActions && !actions && this.moreActionsNode) {\n      this.addedMoreActionsWidthForMeasuring = this.moreActionsNode.getBoundingClientRect().width;\n    }\n\n    this.bulkActionsWidth = this.largeScreenButtonsNode ? this.largeScreenButtonsNode.getBoundingClientRect().width - this.addedMoreActionsWidthForMeasuring : 0;\n\n    if (this.containerNode) {\n      this.setState({\n        containerWidth: this.containerNode.getBoundingClientRect().width,\n        measuring: false\n      });\n    }\n  } // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  render() {\n    const {\n      selectMode,\n      accessibilityLabel,\n      label = '',\n      onToggleAll,\n      selected,\n      smallScreen,\n      disabled,\n      promotedActions,\n      paginatedSelectAllText = null,\n      paginatedSelectAllAction,\n      i18n\n    } = this.props;\n    const actionSections = this.actionSections();\n\n    if (promotedActions && promotedActions.length > MAX_PROMOTED_ACTIONS && process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(i18n.translate('Polaris.ResourceList.BulkActions.warningMessage', {\n        maxPromotedActions: MAX_PROMOTED_ACTIONS\n      }));\n    }\n\n    const {\n      smallScreenPopoverVisible,\n      largeScreenPopoverVisible,\n      measuring\n    } = this.state;\n    const paginatedSelectAllActionMarkup = paginatedSelectAllAction ? /*#__PURE__*/React.createElement(Button, {\n      onClick: paginatedSelectAllAction.onAction,\n      plain: true,\n      disabled: disabled\n    }, paginatedSelectAllAction.content) : null;\n    const paginatedSelectAllTextMarkup = paginatedSelectAllText && paginatedSelectAllAction ? /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-live\": \"polite\"\n    }, paginatedSelectAllText) : paginatedSelectAllText;\n    const paginatedSelectAllMarkup = paginatedSelectAllActionMarkup || paginatedSelectAllTextMarkup ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.PaginatedSelectAll\n    }, paginatedSelectAllTextMarkup, \" \", paginatedSelectAllActionMarkup) : null;\n    const cancelButton = /*#__PURE__*/React.createElement(Button, {\n      onClick: this.setSelectMode.bind(this, false),\n      disabled: disabled\n    }, i18n.translate('Polaris.Common.cancel'));\n    const numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();\n    const allActionsPopover = this.hasActions() ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Popover,\n      ref: this.setMoreActionsNode\n    }, /*#__PURE__*/React.createElement(Popover, {\n      active: smallScreenPopoverVisible,\n      activator: /*#__PURE__*/React.createElement(BulkActionButton, {\n        disclosure: true,\n        onAction: this.toggleSmallScreenPopover,\n        content: i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel'),\n        disabled: disabled,\n        indicator: this.isNewBadgeInBadgeActions()\n      }),\n      onClose: this.toggleSmallScreenPopover\n    }, /*#__PURE__*/React.createElement(ActionList, {\n      items: promotedActions,\n      sections: actionSections,\n      onActionAnyItem: this.toggleSmallScreenPopover\n    }))) : null;\n    const promotedActionsMarkup = promotedActions && numberOfPromotedActionsToRender > 0 ? [...promotedActions].slice(0, numberOfPromotedActionsToRender).map((action, index) => {\n      if (instanceOfMenuGroupDescriptor(action)) {\n        return /*#__PURE__*/React.createElement(BulkActionMenu, Object.assign({\n          key: index\n        }, action, {\n          isNewBadgeInBadgeActions: this.isNewBadgeInBadgeActions()\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(BulkActionButton, Object.assign({\n        key: index,\n        disabled: disabled\n      }, action, {\n        handleMeasurement: this.handleMeasurement\n      }));\n    }) : null;\n    const rolledInPromotedActions = this.rolledInPromotedActions();\n    const activatorLabel = !promotedActions || promotedActions && numberOfPromotedActionsToRender === 0 && !measuring ? i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel') : i18n.translate('Polaris.ResourceList.BulkActions.moreActionsActivatorLabel');\n    let combinedActions = [];\n\n    if (actionSections && rolledInPromotedActions.length > 0) {\n      combinedActions = [...rolledInPromotedActions, ...actionSections];\n    } else if (actionSections) {\n      combinedActions = actionSections;\n    } else if (rolledInPromotedActions.length > 0) {\n      combinedActions = [...rolledInPromotedActions];\n    }\n\n    const actionsPopover = actionSections || rolledInPromotedActions.length > 0 || measuring ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Popover,\n      ref: this.setMoreActionsNode\n    }, /*#__PURE__*/React.createElement(Popover, {\n      active: largeScreenPopoverVisible,\n      activator: /*#__PURE__*/React.createElement(BulkActionButton, {\n        disclosure: true,\n        onAction: this.toggleLargeScreenPopover,\n        content: activatorLabel,\n        disabled: disabled,\n        indicator: this.isNewBadgeInBadgeActions()\n      }),\n      onClose: this.toggleLargeScreenPopover\n    }, /*#__PURE__*/React.createElement(ActionList, {\n      sections: combinedActions,\n      onActionAnyItem: this.toggleLargeScreenPopover\n    }))) : null;\n    const checkableButtonProps = {\n      accessibilityLabel,\n      label,\n      selected,\n      selectMode,\n      onToggleAll,\n      measuring,\n      disabled\n    };\n    const smallScreenGroup = smallScreen ? /*#__PURE__*/React.createElement(Transition, {\n      timeout: 0,\n      in: selectMode,\n      key: \"smallGroup\",\n      nodeRef: this.smallScreenGroupNode\n    }, status => {\n      const smallScreenGroupClassName = classNames(styles.Group, styles['Group-smallScreen'], styles[`Group-${status}`]);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: smallScreenGroupClassName,\n        ref: this.smallScreenGroupNode\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.ButtonGroupWrapper\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        segmented: true\n      }, /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: this.checkableWrapperNode,\n        in: selectMode,\n        timeout: parseInt(tokens.motion['duration-200'], 10),\n        classNames: slideClasses,\n        appear: !selectMode\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.CheckableContainer,\n        ref: this.checkableWrapperNode\n      }, /*#__PURE__*/React.createElement(CheckableButton, Object.assign({}, checkableButtonProps, {\n        smallScreen: true\n      })))), allActionsPopover, cancelButton)), paginatedSelectAllMarkup);\n    }) : null;\n    const largeGroupContent = promotedActionsMarkup || actionsPopover ? /*#__PURE__*/React.createElement(ButtonGroup, {\n      segmented: true\n    }, /*#__PURE__*/React.createElement(CheckableButton, checkableButtonProps), promotedActionsMarkup, actionsPopover) : /*#__PURE__*/React.createElement(CheckableButton, checkableButtonProps);\n    const largeScreenGroup = smallScreen ? null : /*#__PURE__*/React.createElement(Transition, {\n      timeout: 0,\n      in: selectMode,\n      key: \"largeGroup\",\n      nodeRef: this.largeScreenGroupNode\n    }, status => {\n      const largeScreenGroupClassName = classNames(styles.Group, styles['Group-largeScreen'], !measuring && styles[`Group-${status}`], measuring && styles['Group-measuring']);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: largeScreenGroupClassName,\n        ref: this.largeScreenGroupNode\n      }, /*#__PURE__*/React.createElement(EventListener, {\n        event: \"resize\",\n        handler: this.handleResize\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.ButtonGroupWrapper,\n        ref: this.setLargeScreenButtonsNode\n      }, largeGroupContent), paginatedSelectAllMarkup);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.setContainerNode\n    }, smallScreenGroup, largeScreenGroup);\n  }\n\n  isNewBadgeInBadgeActions() {\n    const actions = this.actionSections();\n    if (!actions) return false;\n\n    for (const action of actions) {\n      for (const item of action.items) {\n        var _item$badge;\n\n        if (((_item$badge = item.badge) === null || _item$badge === void 0 ? void 0 : _item$badge.status) === 'new') return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nfunction instanceOfBulkActionListSectionArray(actions) {\n  const validList = actions.filter(action => {\n    return action.items;\n  });\n  return actions.length === validList.length;\n}\n\nfunction instanceOfBulkActionArray(actions) {\n  const validList = actions.filter(action => {\n    return !action.items;\n  });\n  return actions.length === validList.length;\n}\n\nfunction instanceOfMenuGroupDescriptor(action) {\n  return 'title' in action;\n}\n\nfunction BulkActions(props) {\n  const i18n = useI18n();\n  return /*#__PURE__*/React.createElement(BulkActionsInner, Object.assign({}, props, {\n    i18n: i18n\n  }));\n}\n\nexport { BulkActions };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/BulkActions/BulkActions.js"],"names":["React","PureComponent","createRef","debounce","Transition","CSSTransition","classNames","clamp","styles","BulkActionMenu","CheckableButton","useI18n","Button","Popover","BulkActionButton","ActionList","ButtonGroup","tokens","EventListener","MAX_PROMOTED_ACTIONS","slideClasses","appear","Slide","appearActive","enter","enterActive","exit","BulkActionsInner","constructor","state","smallScreenPopoverVisible","largeScreenPopoverVisible","containerWidth","measuring","containerNode","largeScreenButtonsNode","moreActionsNode","checkableWrapperNode","largeScreenGroupNode","smallScreenGroupNode","promotedActionsWidths","bulkActionsWidth","addedMoreActionsWidthForMeasuring","handleResize","getBoundingClientRect","width","setState","trailing","setLargeScreenButtonsNode","node","setContainerNode","setMoreActionsNode","setSelectMode","val","onSelectModeToggle","props","toggleSmallScreenPopover","onMoreActionPopoverToggle","toggleLargeScreenPopover","handleMeasurement","push","numberOfPromotedActionsToRender","promotedActions","length","sufficientSpace","counter","totalWidth","widthWithRemovedAction","hasActions","actions","Boolean","actionSections","instanceOfBulkActionListSectionArray","instanceOfBulkActionArray","items","rolledInPromotedActions","map","action","instanceOfMenuGroupDescriptor","slice","componentDidMount","render","selectMode","accessibilityLabel","label","onToggleAll","selected","smallScreen","disabled","paginatedSelectAllText","paginatedSelectAllAction","i18n","process","env","NODE_ENV","console","warn","translate","maxPromotedActions","paginatedSelectAllActionMarkup","createElement","onClick","onAction","plain","content","paginatedSelectAllTextMarkup","paginatedSelectAllMarkup","className","PaginatedSelectAll","cancelButton","bind","allActionsPopover","ref","active","activator","disclosure","indicator","isNewBadgeInBadgeActions","onClose","sections","onActionAnyItem","promotedActionsMarkup","index","Object","assign","key","activatorLabel","combinedActions","actionsPopover","checkableButtonProps","smallScreenGroup","timeout","in","nodeRef","status","smallScreenGroupClassName","Group","ButtonGroupWrapper","segmented","parseInt","motion","CheckableContainer","largeGroupContent","largeScreenGroup","largeScreenGroupClassName","event","handler","item","_item$badge","badge","validList","filter","BulkActions"],"mappings":"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","sourcesContent":["import React, { PureComponent, createRef } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport { classNames } from '../../utilities/css.js';\nimport { clamp } from '../../utilities/clamp.js';\nimport styles from './BulkActions.scss.js';\nimport { BulkActionMenu } from './components/BulkActionMenu/BulkActionMenu.js';\nimport { CheckableButton } from '../CheckableButton/CheckableButton.js';\nimport { useI18n } from '../../utilities/i18n/hooks.js';\nimport { Button } from '../Button/Button.js';\nimport { Popover } from '../Popover/Popover.js';\nimport { BulkActionButton } from './components/BulkActionButton/BulkActionButton.js';\nimport { ActionList } from '../ActionList/ActionList.js';\nimport { ButtonGroup } from '../ButtonGroup/ButtonGroup.js';\nimport { tokens } from '../../tokens/tokens.js';\nimport { EventListener } from '../EventListener/EventListener.js';\n\nconst MAX_PROMOTED_ACTIONS = 2;\nconst slideClasses = {\n  appear: classNames(styles.Slide, styles['Slide-appear']),\n  appearActive: classNames(styles.Slide, styles['Slide-appearing']),\n  enter: classNames(styles.Slide, styles['Slide-enter']),\n  enterActive: classNames(styles.Slide, styles['Slide-entering']),\n  exit: classNames(styles.Slide, styles['Slide-exit'])\n};\n\nclass BulkActionsInner extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      smallScreenPopoverVisible: false,\n      largeScreenPopoverVisible: false,\n      containerWidth: 0,\n      measuring: true\n    };\n    this.containerNode = null;\n    this.largeScreenButtonsNode = null;\n    this.moreActionsNode = null;\n    this.checkableWrapperNode = /*#__PURE__*/createRef();\n    this.largeScreenGroupNode = /*#__PURE__*/createRef();\n    this.smallScreenGroupNode = /*#__PURE__*/createRef();\n    this.promotedActionsWidths = [];\n    this.bulkActionsWidth = 0;\n    this.addedMoreActionsWidthForMeasuring = 0;\n    this.handleResize = debounce(() => {\n      const {\n        smallScreenPopoverVisible,\n        largeScreenPopoverVisible\n      } = this.state;\n\n      if (this.containerNode) {\n        const containerWidth = this.containerNode.getBoundingClientRect().width;\n\n        if (containerWidth > 0) {\n          this.setState({\n            containerWidth\n          });\n        }\n      }\n\n      if (smallScreenPopoverVisible || largeScreenPopoverVisible) {\n        this.setState({\n          smallScreenPopoverVisible: false,\n          largeScreenPopoverVisible: false\n        });\n      }\n    }, 50, {\n      trailing: true\n    });\n\n    this.setLargeScreenButtonsNode = node => {\n      this.largeScreenButtonsNode = node;\n    };\n\n    this.setContainerNode = node => {\n      this.containerNode = node;\n    };\n\n    this.setMoreActionsNode = node => {\n      this.moreActionsNode = node;\n    };\n\n    this.setSelectMode = val => {\n      const {\n        onSelectModeToggle\n      } = this.props;\n\n      if (onSelectModeToggle) {\n        onSelectModeToggle(val);\n      }\n    };\n\n    this.toggleSmallScreenPopover = () => {\n      if (this.props.onMoreActionPopoverToggle) {\n        this.props.onMoreActionPopoverToggle(this.state.smallScreenPopoverVisible);\n      }\n\n      this.setState(({\n        smallScreenPopoverVisible\n      }) => ({\n        smallScreenPopoverVisible: !smallScreenPopoverVisible\n      }));\n    };\n\n    this.toggleLargeScreenPopover = () => {\n      if (this.props.onMoreActionPopoverToggle) {\n        this.props.onMoreActionPopoverToggle(this.state.largeScreenPopoverVisible);\n      }\n\n      this.setState(({\n        largeScreenPopoverVisible\n      }) => ({\n        largeScreenPopoverVisible: !largeScreenPopoverVisible\n      }));\n    };\n\n    this.handleMeasurement = width => {\n      const {\n        measuring\n      } = this.state;\n\n      if (measuring) {\n        this.promotedActionsWidths.push(width);\n      }\n    };\n  }\n\n  numberOfPromotedActionsToRender() {\n    const {\n      promotedActions\n    } = this.props;\n    const {\n      containerWidth,\n      measuring\n    } = this.state;\n\n    if (!promotedActions) {\n      return 0;\n    }\n\n    if (containerWidth >= this.bulkActionsWidth || measuring) {\n      return promotedActions.length;\n    }\n\n    let sufficientSpace = false;\n    let counter = promotedActions.length - 1;\n    let totalWidth = 0;\n\n    while (!sufficientSpace && counter >= 0) {\n      totalWidth += this.promotedActionsWidths[counter];\n      const widthWithRemovedAction = this.bulkActionsWidth - totalWidth + this.addedMoreActionsWidthForMeasuring;\n\n      if (containerWidth >= widthWithRemovedAction) {\n        sufficientSpace = true;\n      } else {\n        counter--;\n      }\n    }\n\n    return clamp(counter, 0, promotedActions.length);\n  }\n\n  hasActions() {\n    const {\n      promotedActions,\n      actions\n    } = this.props;\n    return Boolean(promotedActions && promotedActions.length > 0 || actions && actions.length > 0);\n  }\n\n  actionSections() {\n    const {\n      actions\n    } = this.props;\n\n    if (!actions || actions.length === 0) {\n      return;\n    }\n\n    if (instanceOfBulkActionListSectionArray(actions)) {\n      return actions;\n    }\n\n    if (instanceOfBulkActionArray(actions)) {\n      return [{\n        items: actions\n      }];\n    }\n  }\n\n  rolledInPromotedActions() {\n    const {\n      promotedActions\n    } = this.props;\n    const numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();\n\n    if (!promotedActions || promotedActions.length === 0 || numberOfPromotedActionsToRender >= promotedActions.length) {\n      return [];\n    }\n\n    const rolledInPromotedActions = promotedActions.map(action => {\n      if (instanceOfMenuGroupDescriptor(action)) {\n        return {\n          items: [...action.actions]\n        };\n      }\n\n      return {\n        items: [action]\n      };\n    });\n    return rolledInPromotedActions.slice(numberOfPromotedActionsToRender);\n  } // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  componentDidMount() {\n    const {\n      actions,\n      promotedActions\n    } = this.props;\n\n    if (promotedActions && !actions && this.moreActionsNode) {\n      this.addedMoreActionsWidthForMeasuring = this.moreActionsNode.getBoundingClientRect().width;\n    }\n\n    this.bulkActionsWidth = this.largeScreenButtonsNode ? this.largeScreenButtonsNode.getBoundingClientRect().width - this.addedMoreActionsWidthForMeasuring : 0;\n\n    if (this.containerNode) {\n      this.setState({\n        containerWidth: this.containerNode.getBoundingClientRect().width,\n        measuring: false\n      });\n    }\n  } // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  render() {\n    const {\n      selectMode,\n      accessibilityLabel,\n      label = '',\n      onToggleAll,\n      selected,\n      smallScreen,\n      disabled,\n      promotedActions,\n      paginatedSelectAllText = null,\n      paginatedSelectAllAction,\n      i18n\n    } = this.props;\n    const actionSections = this.actionSections();\n\n    if (promotedActions && promotedActions.length > MAX_PROMOTED_ACTIONS && process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(i18n.translate('Polaris.ResourceList.BulkActions.warningMessage', {\n        maxPromotedActions: MAX_PROMOTED_ACTIONS\n      }));\n    }\n\n    const {\n      smallScreenPopoverVisible,\n      largeScreenPopoverVisible,\n      measuring\n    } = this.state;\n    const paginatedSelectAllActionMarkup = paginatedSelectAllAction ? /*#__PURE__*/React.createElement(Button, {\n      onClick: paginatedSelectAllAction.onAction,\n      plain: true,\n      disabled: disabled\n    }, paginatedSelectAllAction.content) : null;\n    const paginatedSelectAllTextMarkup = paginatedSelectAllText && paginatedSelectAllAction ? /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-live\": \"polite\"\n    }, paginatedSelectAllText) : paginatedSelectAllText;\n    const paginatedSelectAllMarkup = paginatedSelectAllActionMarkup || paginatedSelectAllTextMarkup ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.PaginatedSelectAll\n    }, paginatedSelectAllTextMarkup, \" \", paginatedSelectAllActionMarkup) : null;\n    const cancelButton = /*#__PURE__*/React.createElement(Button, {\n      onClick: this.setSelectMode.bind(this, false),\n      disabled: disabled\n    }, i18n.translate('Polaris.Common.cancel'));\n    const numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();\n    const allActionsPopover = this.hasActions() ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Popover,\n      ref: this.setMoreActionsNode\n    }, /*#__PURE__*/React.createElement(Popover, {\n      active: smallScreenPopoverVisible,\n      activator: /*#__PURE__*/React.createElement(BulkActionButton, {\n        disclosure: true,\n        onAction: this.toggleSmallScreenPopover,\n        content: i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel'),\n        disabled: disabled,\n        indicator: this.isNewBadgeInBadgeActions()\n      }),\n      onClose: this.toggleSmallScreenPopover\n    }, /*#__PURE__*/React.createElement(ActionList, {\n      items: promotedActions,\n      sections: actionSections,\n      onActionAnyItem: this.toggleSmallScreenPopover\n    }))) : null;\n    const promotedActionsMarkup = promotedActions && numberOfPromotedActionsToRender > 0 ? [...promotedActions].slice(0, numberOfPromotedActionsToRender).map((action, index) => {\n      if (instanceOfMenuGroupDescriptor(action)) {\n        return /*#__PURE__*/React.createElement(BulkActionMenu, Object.assign({\n          key: index\n        }, action, {\n          isNewBadgeInBadgeActions: this.isNewBadgeInBadgeActions()\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(BulkActionButton, Object.assign({\n        key: index,\n        disabled: disabled\n      }, action, {\n        handleMeasurement: this.handleMeasurement\n      }));\n    }) : null;\n    const rolledInPromotedActions = this.rolledInPromotedActions();\n    const activatorLabel = !promotedActions || promotedActions && numberOfPromotedActionsToRender === 0 && !measuring ? i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel') : i18n.translate('Polaris.ResourceList.BulkActions.moreActionsActivatorLabel');\n    let combinedActions = [];\n\n    if (actionSections && rolledInPromotedActions.length > 0) {\n      combinedActions = [...rolledInPromotedActions, ...actionSections];\n    } else if (actionSections) {\n      combinedActions = actionSections;\n    } else if (rolledInPromotedActions.length > 0) {\n      combinedActions = [...rolledInPromotedActions];\n    }\n\n    const actionsPopover = actionSections || rolledInPromotedActions.length > 0 || measuring ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Popover,\n      ref: this.setMoreActionsNode\n    }, /*#__PURE__*/React.createElement(Popover, {\n      active: largeScreenPopoverVisible,\n      activator: /*#__PURE__*/React.createElement(BulkActionButton, {\n        disclosure: true,\n        onAction: this.toggleLargeScreenPopover,\n        content: activatorLabel,\n        disabled: disabled,\n        indicator: this.isNewBadgeInBadgeActions()\n      }),\n      onClose: this.toggleLargeScreenPopover\n    }, /*#__PURE__*/React.createElement(ActionList, {\n      sections: combinedActions,\n      onActionAnyItem: this.toggleLargeScreenPopover\n    }))) : null;\n    const checkableButtonProps = {\n      accessibilityLabel,\n      label,\n      selected,\n      selectMode,\n      onToggleAll,\n      measuring,\n      disabled\n    };\n    const smallScreenGroup = smallScreen ? /*#__PURE__*/React.createElement(Transition, {\n      timeout: 0,\n      in: selectMode,\n      key: \"smallGroup\",\n      nodeRef: this.smallScreenGroupNode\n    }, status => {\n      const smallScreenGroupClassName = classNames(styles.Group, styles['Group-smallScreen'], styles[`Group-${status}`]);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: smallScreenGroupClassName,\n        ref: this.smallScreenGroupNode\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.ButtonGroupWrapper\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        segmented: true\n      }, /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: this.checkableWrapperNode,\n        in: selectMode,\n        timeout: parseInt(tokens.motion['duration-200'], 10),\n        classNames: slideClasses,\n        appear: !selectMode\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.CheckableContainer,\n        ref: this.checkableWrapperNode\n      }, /*#__PURE__*/React.createElement(CheckableButton, Object.assign({}, checkableButtonProps, {\n        smallScreen: true\n      })))), allActionsPopover, cancelButton)), paginatedSelectAllMarkup);\n    }) : null;\n    const largeGroupContent = promotedActionsMarkup || actionsPopover ? /*#__PURE__*/React.createElement(ButtonGroup, {\n      segmented: true\n    }, /*#__PURE__*/React.createElement(CheckableButton, checkableButtonProps), promotedActionsMarkup, actionsPopover) : /*#__PURE__*/React.createElement(CheckableButton, checkableButtonProps);\n    const largeScreenGroup = smallScreen ? null : /*#__PURE__*/React.createElement(Transition, {\n      timeout: 0,\n      in: selectMode,\n      key: \"largeGroup\",\n      nodeRef: this.largeScreenGroupNode\n    }, status => {\n      const largeScreenGroupClassName = classNames(styles.Group, styles['Group-largeScreen'], !measuring && styles[`Group-${status}`], measuring && styles['Group-measuring']);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: largeScreenGroupClassName,\n        ref: this.largeScreenGroupNode\n      }, /*#__PURE__*/React.createElement(EventListener, {\n        event: \"resize\",\n        handler: this.handleResize\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.ButtonGroupWrapper,\n        ref: this.setLargeScreenButtonsNode\n      }, largeGroupContent), paginatedSelectAllMarkup);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.setContainerNode\n    }, smallScreenGroup, largeScreenGroup);\n  }\n\n  isNewBadgeInBadgeActions() {\n    const actions = this.actionSections();\n    if (!actions) return false;\n\n    for (const action of actions) {\n      for (const item of action.items) {\n        var _item$badge;\n\n        if (((_item$badge = item.badge) === null || _item$badge === void 0 ? void 0 : _item$badge.status) === 'new') return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nfunction instanceOfBulkActionListSectionArray(actions) {\n  const validList = actions.filter(action => {\n    return action.items;\n  });\n  return actions.length === validList.length;\n}\n\nfunction instanceOfBulkActionArray(actions) {\n  const validList = actions.filter(action => {\n    return !action.items;\n  });\n  return actions.length === validList.length;\n}\n\nfunction instanceOfMenuGroupDescriptor(action) {\n  return 'title' in action;\n}\n\nfunction BulkActions(props) {\n  const i18n = useI18n();\n  return /*#__PURE__*/React.createElement(BulkActionsInner, Object.assign({}, props, {\n    i18n: i18n\n  }));\n}\n\nexport { BulkActions };\n"]},"metadata":{},"sourceType":"module"}