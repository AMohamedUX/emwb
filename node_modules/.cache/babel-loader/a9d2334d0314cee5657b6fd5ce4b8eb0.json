{"ast":null,"code":"import React from 'react';\nimport { SelectMinor } from '@shopify/polaris-icons';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Select.scss.js';\nimport { useUniqueId } from '../../utilities/unique-id/hooks.js';\nimport { Icon } from '../Icon/Icon.js';\nimport { Labelled, helpTextID } from '../Labelled/Labelled.js';\nconst PLACEHOLDER_VALUE = '';\n\nfunction Select(_ref) {\n  let {\n    options: optionsProp,\n    label,\n    labelAction,\n    labelHidden: labelHiddenProp,\n    labelInline,\n    disabled,\n    helpText,\n    placeholder,\n    id: idProp,\n    name,\n    value = PLACEHOLDER_VALUE,\n    error,\n    onChange,\n    onFocus,\n    onBlur,\n    requiredIndicator\n  } = _ref;\n  const id = useUniqueId('Select', idProp);\n  const labelHidden = labelInline ? true : labelHiddenProp;\n  const className = classNames(styles.Select, error && styles.error, disabled && styles.disabled);\n  const handleChange = onChange ? event => onChange(event.currentTarget.value, id) : undefined;\n  const describedBy = [];\n\n  if (helpText) {\n    describedBy.push(helpTextID(id));\n  }\n\n  if (error) {\n    describedBy.push(`${id}Error`);\n  }\n\n  const options = optionsProp || [];\n  let normalizedOptions = options.map(normalizeOption);\n\n  if (placeholder) {\n    normalizedOptions = [{\n      label: placeholder,\n      value: PLACEHOLDER_VALUE,\n      disabled: true\n    }, ...normalizedOptions];\n  }\n\n  const inlineLabelMarkup = labelInline && /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.InlineLabel\n  }, label);\n  const selectedOption = getSelectedOption(normalizedOptions, value);\n  const prefixMarkup = selectedOption.prefix && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Prefix\n  }, selectedOption.prefix);\n  const contentMarkup = /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Content,\n    \"aria-hidden\": true,\n    \"aria-disabled\": disabled\n  }, inlineLabelMarkup, prefixMarkup, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.SelectedOption\n  }, selectedOption.label), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Icon\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: SelectMinor\n  })));\n  const optionsMarkup = normalizedOptions.map(renderOption);\n  return /*#__PURE__*/React.createElement(Labelled, {\n    id: id,\n    label: label,\n    error: error,\n    action: labelAction,\n    labelHidden: labelHidden,\n    helpText: helpText,\n    requiredIndicator: requiredIndicator\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: id,\n    name: name,\n    value: value,\n    className: styles.Input,\n    disabled: disabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: handleChange,\n    \"aria-invalid\": Boolean(error),\n    \"aria-describedby\": describedBy.length ? describedBy.join(' ') : undefined,\n    \"aria-required\": requiredIndicator\n  }, optionsMarkup), contentMarkup, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Backdrop\n  })));\n}\n\nfunction isString(option) {\n  return typeof option === 'string';\n}\n\nfunction isGroup(option) {\n  return typeof option === 'object' && 'options' in option && option.options != null;\n}\n\nfunction normalizeStringOption(option) {\n  return {\n    label: option,\n    value: option\n  };\n}\n/**\n * Converts a string option (and each string option in a Group) into\n * an Option object.\n */\n\n\nfunction normalizeOption(option) {\n  if (isString(option)) {\n    return normalizeStringOption(option);\n  } else if (isGroup(option)) {\n    const {\n      title,\n      options\n    } = option;\n    return {\n      title,\n      options: options.map(option => {\n        return isString(option) ? normalizeStringOption(option) : option;\n      })\n    };\n  }\n\n  return option;\n}\n/**\n * Gets the text to display in the UI, for the currently selected option\n */\n\n\nfunction getSelectedOption(options, value) {\n  const flatOptions = flattenOptions(options);\n  let selectedOption = flatOptions.find(option => value === option.value);\n\n  if (selectedOption === undefined) {\n    // Get the first visible option (not the hidden placeholder)\n    selectedOption = flatOptions.find(option => !option.hidden);\n  }\n\n  return selectedOption || {\n    value: '',\n    label: ''\n  };\n}\n/**\n * Ungroups an options array\n */\n\n\nfunction flattenOptions(options) {\n  let flatOptions = [];\n  options.forEach(optionOrGroup => {\n    if (isGroup(optionOrGroup)) {\n      flatOptions = flatOptions.concat(optionOrGroup.options);\n    } else {\n      flatOptions.push(optionOrGroup);\n    }\n  });\n  return flatOptions;\n}\n\nfunction renderSingleOption(option) {\n  const {\n    value,\n    label,\n    prefix: _prefix,\n    ...rest\n  } = option;\n  return /*#__PURE__*/React.createElement(\"option\", Object.assign({\n    key: value,\n    value: value\n  }, rest), label);\n}\n\nfunction renderOption(optionOrGroup) {\n  if (isGroup(optionOrGroup)) {\n    const {\n      title,\n      options\n    } = optionOrGroup;\n    return /*#__PURE__*/React.createElement(\"optgroup\", {\n      label: title,\n      key: title\n    }, options.map(renderSingleOption));\n  }\n\n  return renderSingleOption(optionOrGroup);\n}\n\nexport { Select };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/Select/Select.js"],"names":["React","SelectMinor","classNames","styles","useUniqueId","Icon","Labelled","helpTextID","PLACEHOLDER_VALUE","Select","options","optionsProp","label","labelAction","labelHidden","labelHiddenProp","labelInline","disabled","helpText","placeholder","id","idProp","name","value","error","onChange","onFocus","onBlur","requiredIndicator","className","handleChange","event","currentTarget","undefined","describedBy","push","normalizedOptions","map","normalizeOption","inlineLabelMarkup","createElement","InlineLabel","selectedOption","getSelectedOption","prefixMarkup","prefix","Prefix","contentMarkup","Content","SelectedOption","source","optionsMarkup","renderOption","action","Input","Boolean","length","join","Backdrop","isString","option","isGroup","normalizeStringOption","title","flatOptions","flattenOptions","find","hidden","forEach","optionOrGroup","concat","renderSingleOption","_prefix","rest","Object","assign","key"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { SelectMinor } from '@shopify/polaris-icons';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Select.scss.js';\nimport { useUniqueId } from '../../utilities/unique-id/hooks.js';\nimport { Icon } from '../Icon/Icon.js';\nimport { Labelled, helpTextID } from '../Labelled/Labelled.js';\n\nconst PLACEHOLDER_VALUE = '';\nfunction Select({\n  options: optionsProp,\n  label,\n  labelAction,\n  labelHidden: labelHiddenProp,\n  labelInline,\n  disabled,\n  helpText,\n  placeholder,\n  id: idProp,\n  name,\n  value = PLACEHOLDER_VALUE,\n  error,\n  onChange,\n  onFocus,\n  onBlur,\n  requiredIndicator\n}) {\n  const id = useUniqueId('Select', idProp);\n  const labelHidden = labelInline ? true : labelHiddenProp;\n  const className = classNames(styles.Select, error && styles.error, disabled && styles.disabled);\n  const handleChange = onChange ? event => onChange(event.currentTarget.value, id) : undefined;\n  const describedBy = [];\n\n  if (helpText) {\n    describedBy.push(helpTextID(id));\n  }\n\n  if (error) {\n    describedBy.push(`${id}Error`);\n  }\n\n  const options = optionsProp || [];\n  let normalizedOptions = options.map(normalizeOption);\n\n  if (placeholder) {\n    normalizedOptions = [{\n      label: placeholder,\n      value: PLACEHOLDER_VALUE,\n      disabled: true\n    }, ...normalizedOptions];\n  }\n\n  const inlineLabelMarkup = labelInline && /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.InlineLabel\n  }, label);\n  const selectedOption = getSelectedOption(normalizedOptions, value);\n  const prefixMarkup = selectedOption.prefix && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Prefix\n  }, selectedOption.prefix);\n  const contentMarkup = /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Content,\n    \"aria-hidden\": true,\n    \"aria-disabled\": disabled\n  }, inlineLabelMarkup, prefixMarkup, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.SelectedOption\n  }, selectedOption.label), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Icon\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: SelectMinor\n  })));\n  const optionsMarkup = normalizedOptions.map(renderOption);\n  return /*#__PURE__*/React.createElement(Labelled, {\n    id: id,\n    label: label,\n    error: error,\n    action: labelAction,\n    labelHidden: labelHidden,\n    helpText: helpText,\n    requiredIndicator: requiredIndicator\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: id,\n    name: name,\n    value: value,\n    className: styles.Input,\n    disabled: disabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: handleChange,\n    \"aria-invalid\": Boolean(error),\n    \"aria-describedby\": describedBy.length ? describedBy.join(' ') : undefined,\n    \"aria-required\": requiredIndicator\n  }, optionsMarkup), contentMarkup, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Backdrop\n  })));\n}\n\nfunction isString(option) {\n  return typeof option === 'string';\n}\n\nfunction isGroup(option) {\n  return typeof option === 'object' && 'options' in option && option.options != null;\n}\n\nfunction normalizeStringOption(option) {\n  return {\n    label: option,\n    value: option\n  };\n}\n/**\n * Converts a string option (and each string option in a Group) into\n * an Option object.\n */\n\n\nfunction normalizeOption(option) {\n  if (isString(option)) {\n    return normalizeStringOption(option);\n  } else if (isGroup(option)) {\n    const {\n      title,\n      options\n    } = option;\n    return {\n      title,\n      options: options.map(option => {\n        return isString(option) ? normalizeStringOption(option) : option;\n      })\n    };\n  }\n\n  return option;\n}\n/**\n * Gets the text to display in the UI, for the currently selected option\n */\n\n\nfunction getSelectedOption(options, value) {\n  const flatOptions = flattenOptions(options);\n  let selectedOption = flatOptions.find(option => value === option.value);\n\n  if (selectedOption === undefined) {\n    // Get the first visible option (not the hidden placeholder)\n    selectedOption = flatOptions.find(option => !option.hidden);\n  }\n\n  return selectedOption || {\n    value: '',\n    label: ''\n  };\n}\n/**\n * Ungroups an options array\n */\n\n\nfunction flattenOptions(options) {\n  let flatOptions = [];\n  options.forEach(optionOrGroup => {\n    if (isGroup(optionOrGroup)) {\n      flatOptions = flatOptions.concat(optionOrGroup.options);\n    } else {\n      flatOptions.push(optionOrGroup);\n    }\n  });\n  return flatOptions;\n}\n\nfunction renderSingleOption(option) {\n  const {\n    value,\n    label,\n    prefix: _prefix,\n    ...rest\n  } = option;\n  return /*#__PURE__*/React.createElement(\"option\", Object.assign({\n    key: value,\n    value: value\n  }, rest), label);\n}\n\nfunction renderOption(optionOrGroup) {\n  if (isGroup(optionOrGroup)) {\n    const {\n      title,\n      options\n    } = optionOrGroup;\n    return /*#__PURE__*/React.createElement(\"optgroup\", {\n      label: title,\n      key: title\n    }, options.map(renderSingleOption));\n  }\n\n  return renderSingleOption(optionOrGroup);\n}\n\nexport { Select };\n"]},"metadata":{},"sourceType":"module"}