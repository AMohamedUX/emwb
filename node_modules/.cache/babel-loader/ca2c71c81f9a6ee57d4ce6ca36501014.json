{"ast":null,"code":"import React from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport { secondsToTimeComponents, secondsToDurationTranslationKey, secondsToTimestamp } from '../../utilities/duration.js';\nimport styles from './VideoThumbnail.scss.js';\nimport PlayIcon from './illustrations/play.svg.js';\nimport { useI18n } from '../../utilities/i18n/hooks.js';\n\nfunction VideoThumbnail(_ref) {\n  let {\n    thumbnailUrl,\n    videoLength = 0,\n    videoProgress = 0,\n    showVideoProgress = false,\n    accessibilityLabel,\n    onClick,\n    onBeforeStartPlaying\n  } = _ref;\n  const i18n = useI18n();\n  let buttonLabel;\n\n  if (accessibilityLabel) {\n    buttonLabel = accessibilityLabel;\n  } else if (videoLength) {\n    const {\n      hours,\n      minutes,\n      seconds\n    } = secondsToTimeComponents(videoLength);\n    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration', {\n      duration: i18n.translate(secondsToDurationTranslationKey(videoLength), {\n        hourCount: hours,\n        minuteCount: minutes,\n        secondCount: seconds\n      })\n    });\n  } else {\n    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.default');\n  }\n\n  const timeStampMarkup = videoLength ? /*#__PURE__*/React.createElement(\"p\", {\n    className: classNames(styles.Timestamp, showVideoProgress && styles.withProgress)\n  }, secondsToTimestamp(videoLength)) : null;\n  let progressMarkup = null;\n\n  if (showVideoProgress) {\n    const progressValue = calculateProgress(videoLength, videoProgress);\n    const progressValuePercents = Math.round(progressValue * 100);\n    /* eslint-disable @shopify/jsx-no-hardcoded-content */\n\n    progressMarkup = /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Progress\n    }, /*#__PURE__*/React.createElement(\"progress\", {\n      className: styles.ProgressBar,\n      value: progressValuePercents,\n      max: \"100\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Indicator,\n      style: {\n        transform: `scaleX(${progressValue})`\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: styles.Label\n    }, progressValuePercents, \"%\")));\n    /* eslint-enable @shopify/jsx-no-hardcoded-content */\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Thumbnail,\n    style: {\n      backgroundImage: `url(${thumbnailUrl})`\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: styles.PlayButton,\n    \"aria-label\": buttonLabel,\n    onClick: onClick,\n    onMouseEnter: onBeforeStartPlaying,\n    onFocus: onBeforeStartPlaying,\n    onTouchStart: onBeforeStartPlaying\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.PlayIcon,\n    src: PlayIcon,\n    alt: \"\"\n  })), timeStampMarkup, progressMarkup);\n}\n\nfunction calculateProgress(videoLength, videoProgress) {\n  if (videoProgress > videoLength && process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.warn('Value passed to the video progress should not exceed video length. Resetting progress to 100%.');\n  }\n\n  if (videoProgress > 0 && videoLength > 0) {\n    const progress = parseFloat((videoProgress / videoLength).toFixed(2));\n    return progress > 1 ? 1 : progress;\n  }\n\n  return 0;\n}\n\nexport { VideoThumbnail };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/VideoThumbnail/VideoThumbnail.js"],"names":["React","classNames","secondsToTimeComponents","secondsToDurationTranslationKey","secondsToTimestamp","styles","PlayIcon","useI18n","VideoThumbnail","thumbnailUrl","videoLength","videoProgress","showVideoProgress","accessibilityLabel","onClick","onBeforeStartPlaying","i18n","buttonLabel","hours","minutes","seconds","translate","duration","hourCount","minuteCount","secondCount","timeStampMarkup","createElement","className","Timestamp","withProgress","progressMarkup","progressValue","calculateProgress","progressValuePercents","Math","round","Progress","ProgressBar","value","max","Indicator","style","transform","Label","Thumbnail","backgroundImage","type","PlayButton","onMouseEnter","onFocus","onTouchStart","src","alt","process","env","NODE_ENV","console","warn","progress","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport { secondsToTimeComponents, secondsToDurationTranslationKey, secondsToTimestamp } from '../../utilities/duration.js';\nimport styles from './VideoThumbnail.scss.js';\nimport PlayIcon from './illustrations/play.svg.js';\nimport { useI18n } from '../../utilities/i18n/hooks.js';\n\nfunction VideoThumbnail({\n  thumbnailUrl,\n  videoLength = 0,\n  videoProgress = 0,\n  showVideoProgress = false,\n  accessibilityLabel,\n  onClick,\n  onBeforeStartPlaying\n}) {\n  const i18n = useI18n();\n  let buttonLabel;\n\n  if (accessibilityLabel) {\n    buttonLabel = accessibilityLabel;\n  } else if (videoLength) {\n    const {\n      hours,\n      minutes,\n      seconds\n    } = secondsToTimeComponents(videoLength);\n    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration', {\n      duration: i18n.translate(secondsToDurationTranslationKey(videoLength), {\n        hourCount: hours,\n        minuteCount: minutes,\n        secondCount: seconds\n      })\n    });\n  } else {\n    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.default');\n  }\n\n  const timeStampMarkup = videoLength ? /*#__PURE__*/React.createElement(\"p\", {\n    className: classNames(styles.Timestamp, showVideoProgress && styles.withProgress)\n  }, secondsToTimestamp(videoLength)) : null;\n  let progressMarkup = null;\n\n  if (showVideoProgress) {\n    const progressValue = calculateProgress(videoLength, videoProgress);\n    const progressValuePercents = Math.round(progressValue * 100);\n    /* eslint-disable @shopify/jsx-no-hardcoded-content */\n\n    progressMarkup = /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Progress\n    }, /*#__PURE__*/React.createElement(\"progress\", {\n      className: styles.ProgressBar,\n      value: progressValuePercents,\n      max: \"100\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Indicator,\n      style: {\n        transform: `scaleX(${progressValue})`\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: styles.Label\n    }, progressValuePercents, \"%\")));\n    /* eslint-enable @shopify/jsx-no-hardcoded-content */\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Thumbnail,\n    style: {\n      backgroundImage: `url(${thumbnailUrl})`\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: styles.PlayButton,\n    \"aria-label\": buttonLabel,\n    onClick: onClick,\n    onMouseEnter: onBeforeStartPlaying,\n    onFocus: onBeforeStartPlaying,\n    onTouchStart: onBeforeStartPlaying\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.PlayIcon,\n    src: PlayIcon,\n    alt: \"\"\n  })), timeStampMarkup, progressMarkup);\n}\n\nfunction calculateProgress(videoLength, videoProgress) {\n  if (videoProgress > videoLength && process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.warn('Value passed to the video progress should not exceed video length. Resetting progress to 100%.');\n  }\n\n  if (videoProgress > 0 && videoLength > 0) {\n    const progress = parseFloat((videoProgress / videoLength).toFixed(2));\n    return progress > 1 ? 1 : progress;\n  }\n\n  return 0;\n}\n\nexport { VideoThumbnail };\n"]},"metadata":{},"sourceType":"module"}