{"ast":null,"code":"import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { navigationBarCollapsed } from '../../utilities/breakpoints.js';\nimport { MediaQueryContext } from '../../utilities/media-query/context.js';\nimport { EventListener } from '../EventListener/EventListener.js';\n\nconst MediaQueryProvider = function MediaQueryProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [isNavigationCollapsed, setIsNavigationCollapsed] = useState(navigationBarCollapsed().matches); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const handleResize = useCallback(debounce(() => {\n    if (isNavigationCollapsed !== navigationBarCollapsed().matches) {\n      setIsNavigationCollapsed(!isNavigationCollapsed);\n    }\n  }, 40, {\n    trailing: true,\n    leading: true,\n    maxWait: 40\n  }), [isNavigationCollapsed]);\n  useEffect(() => {\n    setIsNavigationCollapsed(navigationBarCollapsed().matches);\n  }, []);\n  const context = useMemo(() => ({\n    isNavigationCollapsed\n  }), [isNavigationCollapsed]);\n  return /*#__PURE__*/React.createElement(MediaQueryContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EventListener, {\n    event: \"resize\",\n    handler: handleResize\n  }), children);\n};\n\nexport { MediaQueryProvider };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/MediaQueryProvider/MediaQueryProvider.js"],"names":["React","useState","useCallback","useEffect","useMemo","debounce","navigationBarCollapsed","MediaQueryContext","EventListener","MediaQueryProvider","children","isNavigationCollapsed","setIsNavigationCollapsed","matches","handleResize","trailing","leading","maxWait","context","createElement","Provider","value","event","handler"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,aAAT,QAA8B,mCAA9B;;AAEA,MAAMC,kBAAkB,GAAG,SAASA,kBAAT,OAExB;AAAA,MAFoD;AACrDC,IAAAA;AADqD,GAEpD;AACD,QAAM,CAACC,qBAAD,EAAwBC,wBAAxB,IAAoDX,QAAQ,CAACK,sBAAsB,GAAGO,OAA1B,CAAlE,CADC,CACqG;;AAEtG,QAAMC,YAAY,GAAGZ,WAAW,CAACG,QAAQ,CAAC,MAAM;AAC9C,QAAIM,qBAAqB,KAAKL,sBAAsB,GAAGO,OAAvD,EAAgE;AAC9DD,MAAAA,wBAAwB,CAAC,CAACD,qBAAF,CAAxB;AACD;AACF,GAJwC,EAItC,EAJsC,EAIlC;AACLI,IAAAA,QAAQ,EAAE,IADL;AAELC,IAAAA,OAAO,EAAE,IAFJ;AAGLC,IAAAA,OAAO,EAAE;AAHJ,GAJkC,CAAT,EAQ5B,CAACN,qBAAD,CAR4B,CAAhC;AASAR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,wBAAwB,CAACN,sBAAsB,GAAGO,OAA1B,CAAxB;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,QAAMK,OAAO,GAAGd,OAAO,CAAC,OAAO;AAC7BO,IAAAA;AAD6B,GAAP,CAAD,EAEnB,CAACA,qBAAD,CAFmB,CAAvB;AAGA,SAAO,aAAaX,KAAK,CAACmB,aAAN,CAAoBZ,iBAAiB,CAACa,QAAtC,EAAgD;AAClEC,IAAAA,KAAK,EAAEH;AAD2D,GAAhD,EAEjB,aAAalB,KAAK,CAACmB,aAAN,CAAoBX,aAApB,EAAmC;AACjDc,IAAAA,KAAK,EAAE,QAD0C;AAEjDC,IAAAA,OAAO,EAAET;AAFwC,GAAnC,CAFI,EAKhBJ,QALgB,CAApB;AAMD,CA1BD;;AA4BA,SAASD,kBAAT","sourcesContent":["import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { navigationBarCollapsed } from '../../utilities/breakpoints.js';\nimport { MediaQueryContext } from '../../utilities/media-query/context.js';\nimport { EventListener } from '../EventListener/EventListener.js';\n\nconst MediaQueryProvider = function MediaQueryProvider({\n  children\n}) {\n  const [isNavigationCollapsed, setIsNavigationCollapsed] = useState(navigationBarCollapsed().matches); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const handleResize = useCallback(debounce(() => {\n    if (isNavigationCollapsed !== navigationBarCollapsed().matches) {\n      setIsNavigationCollapsed(!isNavigationCollapsed);\n    }\n  }, 40, {\n    trailing: true,\n    leading: true,\n    maxWait: 40\n  }), [isNavigationCollapsed]);\n  useEffect(() => {\n    setIsNavigationCollapsed(navigationBarCollapsed().matches);\n  }, []);\n  const context = useMemo(() => ({\n    isNavigationCollapsed\n  }), [isNavigationCollapsed]);\n  return /*#__PURE__*/React.createElement(MediaQueryContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EventListener, {\n    event: \"resize\",\n    handler: handleResize\n  }), children);\n};\n\nexport { MediaQueryProvider };\n"]},"metadata":{},"sourceType":"module"}