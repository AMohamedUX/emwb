{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport { classNames } from '../../../../utilities/css.js';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '../../../../utilities/focus.js';\nimport styles from '../../Tabs.scss.js';\nimport { UnstyledLink } from '../../../UnstyledLink/UnstyledLink.js';\n\nfunction Tab(_ref) {\n  var id = _ref.id,\n      focused = _ref.focused,\n      siblingTabHasFocus = _ref.siblingTabHasFocus,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      selected = _ref.selected,\n      url = _ref.url,\n      panelID = _ref.panelID,\n      measuring = _ref.measuring,\n      accessibilityLabel = _ref.accessibilityLabel;\n  var wasSelected = useRef(selected);\n  var panelFocused = useRef(false);\n  var node = useRef(null); // A tab can start selected when it is moved from the disclosure dropdown\n  // into the main list, so we need to send focus from the tab to the panel\n  // on mount and update\n\n  useEffect(function () {\n    if (measuring) {\n      return;\n    } // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this\n    // as a second indicator of focus\n\n\n    var itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will\n    // be focused on page load, which we don’t want\n\n    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {\n      focusPanelID(panelID);\n      panelFocused.current = true;\n    }\n\n    if (selected && !wasSelected.current && panelID != null) {\n      focusPanelID(panelID);\n    } else if (focused && node.current != null) {\n      focusFirstFocusableNode(node.current);\n    }\n\n    wasSelected.current = selected;\n  }, [focused, id, measuring, panelID, selected]);\n  var handleClick = onClick && onClick.bind(null, id);\n  var className = classNames(styles.Tab, selected && styles['Tab-selected']);\n  var tabIndex;\n\n  if (selected && !siblingTabHasFocus && !measuring) {\n    tabIndex = 0;\n  } else if (focused && !measuring) {\n    tabIndex = 0;\n  } else {\n    tabIndex = -1;\n  }\n\n  var tabContainerClassNames = classNames(styles.TabContainer, selected && styles.Underline);\n  var markup = url ? /*#__PURE__*/React.createElement(UnstyledLink, {\n    id: id,\n    url: url,\n    role: \"tab\",\n    tabIndex: tabIndex,\n    onClick: handleClick,\n    className: className,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Title\n  }, children)) : /*#__PURE__*/React.createElement(\"button\", {\n    id: id,\n    role: \"tab\",\n    type: \"button\",\n    tabIndex: tabIndex,\n    className: className,\n    onClick: handleClick,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Title\n  }, children));\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: tabContainerClassNames,\n    ref: node,\n    role: \"presentation\"\n  }, markup);\n}\n\nfunction focusPanelID(panelID) {\n  var panel = document.getElementById(panelID);\n\n  if (panel) {\n    panel.focus({\n      preventScroll: true\n    });\n  }\n}\n\nexport { Tab };","map":{"version":3,"sources":["/Users/ayubmohamed/emwb/node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/Tab.js"],"names":["React","useRef","useEffect","classNames","focusFirstFocusableNode","handleMouseUpByBlurring","styles","UnstyledLink","Tab","id","focused","siblingTabHasFocus","children","onClick","selected","url","panelID","measuring","accessibilityLabel","wasSelected","panelFocused","node","itemHadFocus","document","activeElement","current","focusPanelID","handleClick","bind","className","tabIndex","tabContainerClassNames","TabContainer","Underline","markup","createElement","role","onMouseUp","Title","type","ref","panel","getElementById","focus","preventScroll"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { classNames } from '../../../../utilities/css.js';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '../../../../utilities/focus.js';\nimport styles from '../../Tabs.scss.js';\nimport { UnstyledLink } from '../../../UnstyledLink/UnstyledLink.js';\n\nfunction Tab({\n  id,\n  focused,\n  siblingTabHasFocus,\n  children,\n  onClick,\n  selected,\n  url,\n  panelID,\n  measuring,\n  accessibilityLabel\n}) {\n  const wasSelected = useRef(selected);\n  const panelFocused = useRef(false);\n  const node = useRef(null); // A tab can start selected when it is moved from the disclosure dropdown\n  // into the main list, so we need to send focus from the tab to the panel\n  // on mount and update\n\n  useEffect(() => {\n    if (measuring) {\n      return;\n    } // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this\n    // as a second indicator of focus\n\n\n    const itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will\n    // be focused on page load, which we don’t want\n\n    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {\n      focusPanelID(panelID);\n      panelFocused.current = true;\n    }\n\n    if (selected && !wasSelected.current && panelID != null) {\n      focusPanelID(panelID);\n    } else if (focused && node.current != null) {\n      focusFirstFocusableNode(node.current);\n    }\n\n    wasSelected.current = selected;\n  }, [focused, id, measuring, panelID, selected]);\n  const handleClick = onClick && onClick.bind(null, id);\n  const className = classNames(styles.Tab, selected && styles['Tab-selected']);\n  let tabIndex;\n\n  if (selected && !siblingTabHasFocus && !measuring) {\n    tabIndex = 0;\n  } else if (focused && !measuring) {\n    tabIndex = 0;\n  } else {\n    tabIndex = -1;\n  }\n\n  const tabContainerClassNames = classNames(styles.TabContainer, selected && styles.Underline);\n  const markup = url ? /*#__PURE__*/React.createElement(UnstyledLink, {\n    id: id,\n    url: url,\n    role: \"tab\",\n    tabIndex: tabIndex,\n    onClick: handleClick,\n    className: className,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Title\n  }, children)) : /*#__PURE__*/React.createElement(\"button\", {\n    id: id,\n    role: \"tab\",\n    type: \"button\",\n    tabIndex: tabIndex,\n    className: className,\n    onClick: handleClick,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Title\n  }, children));\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: tabContainerClassNames,\n    ref: node,\n    role: \"presentation\"\n  }, markup);\n}\n\nfunction focusPanelID(panelID) {\n  const panel = document.getElementById(panelID);\n\n  if (panel) {\n    panel.focus({\n      preventScroll: true\n    });\n  }\n}\n\nexport { Tab };\n"]},"metadata":{},"sourceType":"module"}